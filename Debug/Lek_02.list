
Lek_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c38  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005fc0  08005fc0  00015fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005fc4  08005fc4  00015fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000004  08005fc8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000430  20000088  0800604c  00020088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004b8  0800604c  000204b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a30d  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000320b  00000000  00000000  0003a3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ae0  00000000  00000000  0003d5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019b8  00000000  00000000  0003f0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023f2d  00000000  00000000  00040a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016cd8  00000000  00000000  00064995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e4546  00000000  00000000  0007b66d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0015fbb3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007ba0  00000000  00000000  0015fc08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000088 	.word	0x20000088
 800015c:	00000000 	.word	0x00000000
 8000160:	08005d60 	.word	0x08005d60

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000008c 	.word	0x2000008c
 800017c:	08005d60 	.word	0x08005d60

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <TM1637_Delay>:
#include "SevenSeg.h"

uint8_t seg_array[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};

void TM1637_Delay()
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	e003      	b.n	800052c <TM1637_Delay+0x14>
	{
		__NOP();
 8000524:	bf00      	nop
	for (int i = 0; i < 100; i++)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3301      	adds	r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b63      	cmp	r3, #99	; 0x63
 8000530:	ddf8      	ble.n	8000524 <TM1637_Delay+0xc>
	}
}
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <TM1637_Start>:

void TM1637_Start()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2108      	movs	r1, #8
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <TM1637_Start+0x34>)
 800054a:	f001 fb45 	bl	8001bd8 <HAL_GPIO_WritePin>
	TM1637_Delay();
 800054e:	f7ff ffe3 	bl	8000518 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	2104      	movs	r1, #4
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <TM1637_Start+0x34>)
 8000558:	f001 fb3e 	bl	8001bd8 <HAL_GPIO_WritePin>
	TM1637_Delay();
 800055c:	f7ff ffdc 	bl	8000518 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2108      	movs	r1, #8
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <TM1637_Start+0x34>)
 8000566:	f001 fb37 	bl	8001bd8 <HAL_GPIO_WritePin>
	TM1637_Delay();
 800056a:	f7ff ffd5 	bl	8000518 <TM1637_Delay>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	48000800 	.word	0x48000800

08000578 <TM1637_Stop>:

void TM1637_Stop()
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2104      	movs	r1, #4
 8000580:	4814      	ldr	r0, [pc, #80]	; (80005d4 <TM1637_Stop+0x5c>)
 8000582:	f001 fb29 	bl	8001bd8 <HAL_GPIO_WritePin>
	TM1637_Delay();
 8000586:	f7ff ffc7 	bl	8000518 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2104      	movs	r1, #4
 800058e:	4811      	ldr	r0, [pc, #68]	; (80005d4 <TM1637_Stop+0x5c>)
 8000590:	f001 fb22 	bl	8001bd8 <HAL_GPIO_WritePin>
	TM1637_Delay();
 8000594:	f7ff ffc0 	bl	8000518 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2104      	movs	r1, #4
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <TM1637_Stop+0x5c>)
 800059e:	f001 fb1b 	bl	8001bd8 <HAL_GPIO_WritePin>
	TM1637_Delay();
 80005a2:	f7ff ffb9 	bl	8000518 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2108      	movs	r1, #8
 80005aa:	480a      	ldr	r0, [pc, #40]	; (80005d4 <TM1637_Stop+0x5c>)
 80005ac:	f001 fb14 	bl	8001bd8 <HAL_GPIO_WritePin>
	TM1637_Delay();
 80005b0:	f7ff ffb2 	bl	8000518 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2104      	movs	r1, #4
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <TM1637_Stop+0x5c>)
 80005ba:	f001 fb0d 	bl	8001bd8 <HAL_GPIO_WritePin>
	TM1637_Delay();
 80005be:	f7ff ffab 	bl	8000518 <TM1637_Delay>
	HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2108      	movs	r1, #8
 80005c6:	4803      	ldr	r0, [pc, #12]	; (80005d4 <TM1637_Stop+0x5c>)
 80005c8:	f001 fb06 	bl	8001bd8 <HAL_GPIO_WritePin>
	TM1637_Delay();
 80005cc:	f7ff ffa4 	bl	8000518 <TM1637_Delay>
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	48000800 	.word	0x48000800

080005d8 <TM1637_WriteByte>:

void TM1637_WriteByte(uint8_t byte)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t c = 0; c < 8; c++) {
 80005e2:	2300      	movs	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
 80005e6:	e023      	b.n	8000630 <TM1637_WriteByte+0x58>
		HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2104      	movs	r1, #4
 80005ec:	4824      	ldr	r0, [pc, #144]	; (8000680 <TM1637_WriteByte+0xa8>)
 80005ee:	f001 faf3 	bl	8001bd8 <HAL_GPIO_WritePin>
		if ((byte & 0x01) == 0) {
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d105      	bne.n	8000608 <TM1637_WriteByte+0x30>
			HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2108      	movs	r1, #8
 8000600:	481f      	ldr	r0, [pc, #124]	; (8000680 <TM1637_WriteByte+0xa8>)
 8000602:	f001 fae9 	bl	8001bd8 <HAL_GPIO_WritePin>
 8000606:	e004      	b.n	8000612 <TM1637_WriteByte+0x3a>
		} else {
			HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2108      	movs	r1, #8
 800060c:	481c      	ldr	r0, [pc, #112]	; (8000680 <TM1637_WriteByte+0xa8>)
 800060e:	f001 fae3 	bl	8001bd8 <HAL_GPIO_WritePin>
		}
		byte = byte >> 1;
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	085b      	lsrs	r3, r3, #1
 8000616:	71fb      	strb	r3, [r7, #7]
		TM1637_Delay();
 8000618:	f7ff ff7e 	bl	8000518 <TM1637_Delay>
		HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2104      	movs	r1, #4
 8000620:	4817      	ldr	r0, [pc, #92]	; (8000680 <TM1637_WriteByte+0xa8>)
 8000622:	f001 fad9 	bl	8001bd8 <HAL_GPIO_WritePin>
		TM1637_Delay();
 8000626:	f7ff ff77 	bl	8000518 <TM1637_Delay>
	for (uint8_t c = 0; c < 8; c++) {
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	3301      	adds	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	2b07      	cmp	r3, #7
 8000634:	d9d8      	bls.n	80005e8 <TM1637_WriteByte+0x10>
	}

	HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2108      	movs	r1, #8
 800063a:	4811      	ldr	r0, [pc, #68]	; (8000680 <TM1637_WriteByte+0xa8>)
 800063c:	f001 facc 	bl	8001bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2104      	movs	r1, #4
 8000644:	480e      	ldr	r0, [pc, #56]	; (8000680 <TM1637_WriteByte+0xa8>)
 8000646:	f001 fac7 	bl	8001bd8 <HAL_GPIO_WritePin>
	TM1637_Delay();
 800064a:	f7ff ff65 	bl	8000518 <TM1637_Delay>
	while(HAL_GPIO_ReadPin(SEG_DAT_GPIO_Port, SEG_DAT_Pin) == GPIO_PIN_SET)
 800064e:	bf00      	nop
 8000650:	2108      	movs	r1, #8
 8000652:	480b      	ldr	r0, [pc, #44]	; (8000680 <TM1637_WriteByte+0xa8>)
 8000654:	f001 faa8 	bl	8001ba8 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d0f8      	beq.n	8000650 <TM1637_WriteByte+0x78>
		;
	HAL_GPIO_WritePin(SEG_DAT_GPIO_Port, SEG_DAT_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2108      	movs	r1, #8
 8000662:	4807      	ldr	r0, [pc, #28]	; (8000680 <TM1637_WriteByte+0xa8>)
 8000664:	f001 fab8 	bl	8001bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_CLK_GPIO_Port, SEG_CLK_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2104      	movs	r1, #4
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <TM1637_WriteByte+0xa8>)
 800066e:	f001 fab3 	bl	8001bd8 <HAL_GPIO_WritePin>
	TM1637_Delay();
 8000672:	f7ff ff51 	bl	8000518 <TM1637_Delay>
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	48000800 	.word	0x48000800

08000684 <TM1637_WriteCommand>:


void TM1637_WriteCommand(uint8_t cmd)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	TM1637_Start();
 800068e:	f7ff ff57 	bl	8000540 <TM1637_Start>
	TM1637_WriteByte(cmd);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ff9f 	bl	80005d8 <TM1637_WriteByte>
	TM1637_Stop();
 800069a:	f7ff ff6d 	bl	8000578 <TM1637_Stop>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <TM1637_WriteData>:

void TM1637_WriteData(uint8_t addr,uint8_t data)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	460a      	mov	r2, r1
 80006b0:	71fb      	strb	r3, [r7, #7]
 80006b2:	4613      	mov	r3, r2
 80006b4:	71bb      	strb	r3, [r7, #6]
	TM1637_Start();
 80006b6:	f7ff ff43 	bl	8000540 <TM1637_Start>
	TM1637_WriteByte(addr);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff8b 	bl	80005d8 <TM1637_WriteByte>
	TM1637_WriteByte(data);
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff87 	bl	80005d8 <TM1637_WriteByte>
	TM1637_Stop();
 80006ca:	f7ff ff55 	bl	8000578 <TM1637_Stop>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <DisplayDigits>:

void DisplayDigits(uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4, uint8_t colon)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4604      	mov	r4, r0
 80006e0:	4608      	mov	r0, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	461a      	mov	r2, r3
 80006e6:	4623      	mov	r3, r4
 80006e8:	71fb      	strb	r3, [r7, #7]
 80006ea:	4603      	mov	r3, r0
 80006ec:	71bb      	strb	r3, [r7, #6]
 80006ee:	460b      	mov	r3, r1
 80006f0:	717b      	strb	r3, [r7, #5]
 80006f2:	4613      	mov	r3, r2
 80006f4:	713b      	strb	r3, [r7, #4]
	TM1637_WriteCommand(0x44);
 80006f6:	2044      	movs	r0, #68	; 0x44
 80006f8:	f7ff ffc4 	bl	8000684 <TM1637_WriteCommand>
    TM1637_WriteData(0xc0,seg_array[d1]);
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4a18      	ldr	r2, [pc, #96]	; (8000760 <DisplayDigits+0x88>)
 8000700:	5cd3      	ldrb	r3, [r2, r3]
 8000702:	4619      	mov	r1, r3
 8000704:	20c0      	movs	r0, #192	; 0xc0
 8000706:	f7ff ffce 	bl	80006a6 <TM1637_WriteData>
   	if(colon)
 800070a:	7e3b      	ldrb	r3, [r7, #24]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d00a      	beq.n	8000726 <DisplayDigits+0x4e>
   		  TM1637_WriteData(0xc1,seg_array[d2] | 0x80);
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	4a13      	ldr	r2, [pc, #76]	; (8000760 <DisplayDigits+0x88>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800071a:	b2db      	uxtb	r3, r3
 800071c:	4619      	mov	r1, r3
 800071e:	20c1      	movs	r0, #193	; 0xc1
 8000720:	f7ff ffc1 	bl	80006a6 <TM1637_WriteData>
 8000724:	e006      	b.n	8000734 <DisplayDigits+0x5c>
   	else
   		  TM1637_WriteData(0xc1,seg_array[d2]);
 8000726:	79bb      	ldrb	r3, [r7, #6]
 8000728:	4a0d      	ldr	r2, [pc, #52]	; (8000760 <DisplayDigits+0x88>)
 800072a:	5cd3      	ldrb	r3, [r2, r3]
 800072c:	4619      	mov	r1, r3
 800072e:	20c1      	movs	r0, #193	; 0xc1
 8000730:	f7ff ffb9 	bl	80006a6 <TM1637_WriteData>
    TM1637_WriteData(0xc2, seg_array[d3]);
 8000734:	797b      	ldrb	r3, [r7, #5]
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <DisplayDigits+0x88>)
 8000738:	5cd3      	ldrb	r3, [r2, r3]
 800073a:	4619      	mov	r1, r3
 800073c:	20c2      	movs	r0, #194	; 0xc2
 800073e:	f7ff ffb2 	bl	80006a6 <TM1637_WriteData>
  	TM1637_WriteData(0xc3, seg_array[d4]);
 8000742:	793b      	ldrb	r3, [r7, #4]
 8000744:	4a06      	ldr	r2, [pc, #24]	; (8000760 <DisplayDigits+0x88>)
 8000746:	5cd3      	ldrb	r3, [r2, r3]
 8000748:	4619      	mov	r1, r3
 800074a:	20c3      	movs	r0, #195	; 0xc3
 800074c:	f7ff ffab 	bl	80006a6 <TM1637_WriteData>
    TM1637_WriteCommand(0x8a);
 8000750:	208a      	movs	r0, #138	; 0x8a
 8000752:	f7ff ff97 	bl	8000684 <TM1637_WriteCommand>

}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bd90      	pop	{r4, r7, pc}
 800075e:	bf00      	nop
 8000760:	20000004 	.word	0x20000004

08000764 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800076c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000774:	f023 0218 	bic.w	r2, r3, #24
 8000778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4313      	orrs	r3, r2
 8000780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800079c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800079e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4013      	ands	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007b4:	68fb      	ldr	r3, [r7, #12]
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <randomInt>:
int waitOk = TRUE; //true = button is activated. De-bounce purpose
int newHS = FALSE;

//functions

int randomInt(int min, int max){
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	6039      	str	r1, [r7, #0]
	return (rand() % (max-min)) + min;
 80007cc:	f004 fac6 	bl	8004d5c <rand>
 80007d0:	4602      	mov	r2, r0
 80007d2:	6839      	ldr	r1, [r7, #0]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	1acb      	subs	r3, r1, r3
 80007d8:	fb92 f1f3 	sdiv	r1, r2, r3
 80007dc:	fb03 f301 	mul.w	r3, r3, r1
 80007e0:	1ad2      	subs	r2, r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4413      	add	r3, r2
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <displayFourDigitNr>:

void displayFourDigitNr(int nr){
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b08b      	sub	sp, #44	; 0x2c
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	6078      	str	r0, [r7, #4]
	int digits[4];
	for(int i = 0; i < 4; i++){
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	e01d      	b.n	800083a <displayFourDigitNr+0x4a>
		digits[i] = nr % 10;
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <displayFourDigitNr+0x70>)
 8000802:	fb83 2301 	smull	r2, r3, r3, r1
 8000806:	109a      	asrs	r2, r3, #2
 8000808:	17cb      	asrs	r3, r1, #31
 800080a:	1ad2      	subs	r2, r2, r3
 800080c:	4613      	mov	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	1aca      	subs	r2, r1, r3
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	f107 0120 	add.w	r1, r7, #32
 800081e:	440b      	add	r3, r1
 8000820:	f843 2c14 	str.w	r2, [r3, #-20]
		nr /= 10;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <displayFourDigitNr+0x70>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	1092      	asrs	r2, r2, #2
 800082e:	17db      	asrs	r3, r3, #31
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 4; i++){
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	3301      	adds	r3, #1
 8000838:	61fb      	str	r3, [r7, #28]
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	2b03      	cmp	r3, #3
 800083e:	ddde      	ble.n	80007fe <displayFourDigitNr+0xe>
	}
	DisplayDigits(digits[3], digits[2], digits[1], digits[0], 0);
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	b2d8      	uxtb	r0, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	b2d9      	uxtb	r1, r3
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2400      	movs	r4, #0
 8000852:	9400      	str	r4, [sp, #0]
 8000854:	f7ff ff40 	bl	80006d8 <DisplayDigits>
}
 8000858:	bf00      	nop
 800085a:	3724      	adds	r7, #36	; 0x24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd90      	pop	{r4, r7, pc}
 8000860:	66666667 	.word	0x66666667

08000864 <gameState>:


void gameState(int state){
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b05      	cmp	r3, #5
 8000870:	f200 8149 	bhi.w	8000b06 <gameState+0x2a2>
 8000874:	a201      	add	r2, pc, #4	; (adr r2, 800087c <gameState+0x18>)
 8000876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087a:	bf00      	nop
 800087c:	08000895 	.word	0x08000895
 8000880:	080008ef 	.word	0x080008ef
 8000884:	08000963 	.word	0x08000963
 8000888:	080009c1 	.word	0x080009c1
 800088c:	08000a31 	.word	0x08000a31
 8000890:	08000a8d 	.word	0x08000a8d


	switch(state){
	case Ylw: //Warning state (Yellow light only)
		HAL_GPIO_WritePin(LED_Ylw_GPIO_Port, LED_Ylw_Pin, SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2110      	movs	r1, #16
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f001 f99c 	bl	8001bd8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_Red0_GPIO_Port, LED_Red0_Pin, RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a8:	f001 f996 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2102      	movs	r1, #2
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f001 f990 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2104      	movs	r1, #4
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c0:	f001 f98a 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Blu_GPIO_Port, LED_Blu_Pin, RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2108      	movs	r1, #8
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f001 f984 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Grn_GPIO_Port, LED_Grn_Pin, RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2120      	movs	r1, #32
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f001 f97e 	bl	8001bd8 <HAL_GPIO_WritePin>

		displayFourDigitNr(highScore);
 80008dc:	4b9e      	ldr	r3, [pc, #632]	; (8000b58 <gameState+0x2f4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff85 	bl	80007f0 <displayFourDigitNr>
		nextState = Red1;
 80008e6:	4b9d      	ldr	r3, [pc, #628]	; (8000b5c <gameState+0x2f8>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	601a      	str	r2, [r3, #0]
		break;
 80008ec:	e130      	b.n	8000b50 <gameState+0x2ec>
	case Red1: //Steady state1 (One Red light)
		HAL_GPIO_WritePin(LED_Red0_GPIO_Port, LED_Red0_Pin, SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2101      	movs	r1, #1
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f001 f96f 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2102      	movs	r1, #2
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f001 f969 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2104      	movs	r1, #4
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f001 f963 	bl	8001bd8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_Ylw_GPIO_Port, LED_Ylw_Pin, RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2110      	movs	r1, #16
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f001 f95d 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Blu_GPIO_Port, LED_Blu_Pin, RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2108      	movs	r1, #8
 8000922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000926:	f001 f957 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Grn_GPIO_Port, LED_Grn_Pin, RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2120      	movs	r1, #32
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f001 f951 	bl	8001bd8 <HAL_GPIO_WritePin>

		timeCounter = 0;
 8000936:	4b8a      	ldr	r3, [pc, #552]	; (8000b60 <gameState+0x2fc>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
		red_WaitCounter = RESET;
 800093c:	4b89      	ldr	r3, [pc, #548]	; (8000b64 <gameState+0x300>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]

		red_WaitTime = 1000;
 8000942:	4b89      	ldr	r3, [pc, #548]	; (8000b68 <gameState+0x304>)
 8000944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000948:	601a      	str	r2, [r3, #0]

		displayFourDigitNr(timeCounter);
 800094a:	4b85      	ldr	r3, [pc, #532]	; (8000b60 <gameState+0x2fc>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff4e 	bl	80007f0 <displayFourDigitNr>

		redState = TRUE;
 8000954:	4b85      	ldr	r3, [pc, #532]	; (8000b6c <gameState+0x308>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
		nextState = Red2;
 800095a:	4b80      	ldr	r3, [pc, #512]	; (8000b5c <gameState+0x2f8>)
 800095c:	2202      	movs	r2, #2
 800095e:	601a      	str	r2, [r3, #0]
		break;
 8000960:	e0f6      	b.n	8000b50 <gameState+0x2ec>
	case Red2: //Steady state2 (Two Red Lights)
		HAL_GPIO_WritePin(LED_Red0_GPIO_Port, LED_Red0_Pin, SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2101      	movs	r1, #1
 8000966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096a:	f001 f935 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, SET);
 800096e:	2201      	movs	r2, #1
 8000970:	2102      	movs	r1, #2
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f001 f92f 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2104      	movs	r1, #4
 800097e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000982:	f001 f929 	bl	8001bd8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_Ylw_GPIO_Port, LED_Ylw_Pin, RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2110      	movs	r1, #16
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f001 f923 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Blu_GPIO_Port, LED_Blu_Pin, RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2108      	movs	r1, #8
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f001 f91d 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Grn_GPIO_Port, LED_Grn_Pin, RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2120      	movs	r1, #32
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f001 f917 	bl	8001bd8 <HAL_GPIO_WritePin>

		red_WaitCounter = RESET;
 80009aa:	4b6e      	ldr	r3, [pc, #440]	; (8000b64 <gameState+0x300>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]

		red_WaitTime = 1000;
 80009b0:	4b6d      	ldr	r3, [pc, #436]	; (8000b68 <gameState+0x304>)
 80009b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009b6:	601a      	str	r2, [r3, #0]

		nextState = Red3;
 80009b8:	4b68      	ldr	r3, [pc, #416]	; (8000b5c <gameState+0x2f8>)
 80009ba:	2203      	movs	r2, #3
 80009bc:	601a      	str	r2, [r3, #0]
		break;
 80009be:	e0c7      	b.n	8000b50 <gameState+0x2ec>
	case Red3: //Steady state3 (All red lights)
		HAL_GPIO_WritePin(LED_Red0_GPIO_Port, LED_Red0_Pin, SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f001 f906 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2102      	movs	r1, #2
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f001 f900 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2104      	movs	r1, #4
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f001 f8fa 	bl	8001bd8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_Ylw_GPIO_Port, LED_Ylw_Pin, RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2110      	movs	r1, #16
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f001 f8f4 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Blu_GPIO_Port, LED_Blu_Pin, RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2108      	movs	r1, #8
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f8:	f001 f8ee 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Grn_GPIO_Port, LED_Grn_Pin, RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2120      	movs	r1, #32
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f001 f8e8 	bl	8001bd8 <HAL_GPIO_WritePin>

		red_WaitCounter = RESET;
 8000a08:	4b56      	ldr	r3, [pc, #344]	; (8000b64 <gameState+0x300>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]

		int delayMin = 1000;
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	60fb      	str	r3, [r7, #12]
		int delayMax = 5000;
 8000a14:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a18:	60bb      	str	r3, [r7, #8]
		red_WaitTime = randomInt(delayMin, delayMax);
 8000a1a:	68b9      	ldr	r1, [r7, #8]
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f7ff fed0 	bl	80007c2 <randomInt>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a50      	ldr	r2, [pc, #320]	; (8000b68 <gameState+0x304>)
 8000a26:	6013      	str	r3, [r2, #0]

		nextState = Blu;
 8000a28:	4b4c      	ldr	r3, [pc, #304]	; (8000b5c <gameState+0x2f8>)
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	601a      	str	r2, [r3, #0]
		break;
 8000a2e:	e08f      	b.n	8000b50 <gameState+0x2ec>
	case Blu: //Game state (Only Blue)
		HAL_GPIO_WritePin(LED_Blu_GPIO_Port, LED_Blu_Pin, SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2108      	movs	r1, #8
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f001 f8ce 	bl	8001bd8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_Red0_GPIO_Port, LED_Red0_Pin, RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2101      	movs	r1, #1
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a44:	f001 f8c8 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a50:	f001 f8c2 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2104      	movs	r1, #4
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f001 f8bc 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Ylw_GPIO_Port, LED_Ylw_Pin, RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2110      	movs	r1, #16
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f001 f8b6 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Grn_GPIO_Port, LED_Grn_Pin, RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2120      	movs	r1, #32
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a74:	f001 f8b0 	bl	8001bd8 <HAL_GPIO_WritePin>

		redState = FALSE;
 8000a78:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <gameState+0x308>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
		recordTime = TRUE;
 8000a7e:	4b3c      	ldr	r3, [pc, #240]	; (8000b70 <gameState+0x30c>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	601a      	str	r2, [r3, #0]
		nextState = Grn;
 8000a84:	4b35      	ldr	r3, [pc, #212]	; (8000b5c <gameState+0x2f8>)
 8000a86:	2205      	movs	r2, #5
 8000a88:	601a      	str	r2, [r3, #0]
		break;
 8000a8a:	e061      	b.n	8000b50 <gameState+0x2ec>

	case Grn: //Goal state (Only Green
		HAL_GPIO_WritePin(LED_Grn_GPIO_Port, LED_Grn_Pin, SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2120      	movs	r1, #32
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f001 f8a0 	bl	8001bd8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_Red0_GPIO_Port, LED_Red0_Pin, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f001 f89a 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f001 f894 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab8:	f001 f88e 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Blu_GPIO_Port, LED_Blu_Pin, RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2108      	movs	r1, #8
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f001 f888 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Ylw_GPIO_Port, LED_Ylw_Pin, RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2110      	movs	r1, #16
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad0:	f001 f882 	bl	8001bd8 <HAL_GPIO_WritePin>

		displayFourDigitNr(timeCounter);
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <gameState+0x2fc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe89 	bl	80007f0 <displayFourDigitNr>
		if(timeCounter < highScore){
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <gameState+0x2fc>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <gameState+0x2f4>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	da06      	bge.n	8000af8 <gameState+0x294>
			highScore = timeCounter;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <gameState+0x2fc>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a1a      	ldr	r2, [pc, #104]	; (8000b58 <gameState+0x2f4>)
 8000af0:	6013      	str	r3, [r2, #0]
			newHS = TRUE;
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <gameState+0x310>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	601a      	str	r2, [r3, #0]
		}
		recordTime = FALSE;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <gameState+0x30c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
		nextState = Ylw;
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <gameState+0x2f8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
		break;
 8000b04:	e024      	b.n	8000b50 <gameState+0x2ec>

	default: //No LED
		HAL_GPIO_WritePin(LED_Ylw_GPIO_Port, LED_Ylw_Pin, RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2110      	movs	r1, #16
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0e:	f001 f863 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red0_GPIO_Port, LED_Red0_Pin, RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2101      	movs	r1, #1
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f001 f85d 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red1_GPIO_Port, LED_Red1_Pin, RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2102      	movs	r1, #2
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f001 f857 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Red2_GPIO_Port, LED_Red2_Pin, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b32:	f001 f851 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Blu_GPIO_Port, LED_Blu_Pin, RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2108      	movs	r1, #8
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f001 f84b 	bl	8001bd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_Grn_GPIO_Port, LED_Grn_Pin, RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2120      	movs	r1, #32
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f001 f845 	bl	8001bd8 <HAL_GPIO_WritePin>
		break;
 8000b4e:	bf00      	nop

	}
}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000010 	.word	0x20000010
 8000b5c:	200000b8 	.word	0x200000b8
 8000b60:	200000a4 	.word	0x200000a4
 8000b64:	200000a8 	.word	0x200000a8
 8000b68:	200000b0 	.word	0x200000b0
 8000b6c:	200000c0 	.word	0x200000c0
 8000b70:	200000bc 	.word	0x200000bc
 8000b74:	200000c4 	.word	0x200000c4

08000b78 <toNextState>:

void toNextState(){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
		LED_state = nextState;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <toNextState+0x1c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <toNextState+0x20>)
 8000b82:	6013      	str	r3, [r2, #0]
		gameState(LED_state);
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <toNextState+0x20>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fe6b 	bl	8000864 <gameState>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000b8 	.word	0x200000b8
 8000b98:	200000b4 	.word	0x200000b4

08000b9c <HAL_GPIO_EXTI_Callback>:

//External interrupts

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(BTN_EXTI0_GPIO_Port, BTN_EXTI0_Pin) && waitOk){
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000baa:	f000 fffd 	bl	8001ba8 <HAL_GPIO_ReadPin>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d019      	beq.n	8000be8 <HAL_GPIO_EXTI_Callback+0x4c>
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d015      	beq.n	8000be8 <HAL_GPIO_EXTI_Callback+0x4c>

		waitOk = FALSE;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_GPIO_EXTI_Callback+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
		bounce_WaitCounter = 0;
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]

		if(redState){
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_GPIO_EXTI_Callback+0x60>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d009      	beq.n	8000be4 <HAL_GPIO_EXTI_Callback+0x48>
			redState = FALSE;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_GPIO_EXTI_Callback+0x60>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
			red_WaitCounter = RESET;
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_GPIO_EXTI_Callback+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
			gameState(Ylw);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fe41 	bl	8000864 <gameState>
		}
		else
			toNextState();
	}
}
 8000be2:	e001      	b.n	8000be8 <HAL_GPIO_EXTI_Callback+0x4c>
			toNextState();
 8000be4:	f7ff ffc8 	bl	8000b78 <toNextState>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	48000800 	.word	0x48000800
 8000bf4:	20000014 	.word	0x20000014
 8000bf8:	200000ac 	.word	0x200000ac
 8000bfc:	200000c0 	.word	0x200000c0
 8000c00:	200000a8 	.word	0x200000a8

08000c04 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d137      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x82>

		if(recordTime){
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00f      	beq.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x3a>
			if(++timeCounter == 9999){
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d104      	bne.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x3a>
				recordTime = FALSE;
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
				toNextState();
 8000c3a:	f7ff ff9d 	bl	8000b78 <toNextState>
			}
		}

		if(redState){
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00c      	beq.n	8000c60 <HAL_TIM_PeriodElapsedCallback+0x5c>
			red_WaitCounter++;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c4e:	6013      	str	r3, [r2, #0]
			if(red_WaitCounter == red_WaitTime){
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d101      	bne.n	8000c60 <HAL_TIM_PeriodElapsedCallback+0x5c>
				toNextState();
 8000c5c:	f7ff ff8c 	bl	8000b78 <toNextState>
			}

		}
		if (!waitOk){
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10e      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x82>
			int bounceWait = 250;
 8000c68:	23fa      	movs	r3, #250	; 0xfa
 8000c6a:	60fb      	str	r3, [r7, #12]
			if(++bounce_WaitCounter == bounceWait){
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d102      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x82>
				waitOk = TRUE;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40012c00 	.word	0x40012c00
 8000c94:	200000bc 	.word	0x200000bc
 8000c98:	200000a4 	.word	0x200000a4
 8000c9c:	200000c0 	.word	0x200000c0
 8000ca0:	200000a8 	.word	0x200000a8
 8000ca4:	200000b0 	.word	0x200000b0
 8000ca8:	20000014 	.word	0x20000014
 8000cac:	200000ac 	.word	0x200000ac

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb4:	f000 fc72 	bl	800159c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb8:	f000 f81c 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbc:	f000 f98a 	bl	8000fd4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cc0:	f000 f912 	bl	8000ee8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000cc4:	f000 f95e 	bl	8000f84 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000cc8:	f000 f8ba 	bl	8000e40 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_TIM_Base_Start_IT(&htim1);
 8000ccc:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <main+0x38>)
 8000cce:	f002 ff17 	bl	8003b00 <HAL_TIM_Base_Start_IT>
  displayFourDigitNr(timeCounter);
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <main+0x3c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fd8a 	bl	80007f0 <displayFourDigitNr>
  gameState(LED_state);
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <main+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fdbf 	bl	8000864 <gameState>
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <main+0x36>
 8000ce8:	20000164 	.word	0x20000164
 8000cec:	200000a4 	.word	0x200000a4
 8000cf0:	200000b4 	.word	0x200000b4

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0ae      	sub	sp, #184	; 0xb8
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cfe:	2248      	movs	r2, #72	; 0x48
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f004 f822 	bl	8004d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	615a      	str	r2, [r3, #20]
 8000d1a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2250      	movs	r2, #80	; 0x50
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f004 f812 	bl	8004d4c <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d36:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	f023 0303 	bic.w	r3, r3, #3
 8000d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d4c:	f001 f884 	bl	8001e58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fd07 	bl	8000764 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d56:	4b39      	ldr	r3, [pc, #228]	; (8000e3c <SystemClock_Config+0x148>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d5e:	4a37      	ldr	r2, [pc, #220]	; (8000e3c <SystemClock_Config+0x148>)
 8000d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	4b35      	ldr	r3, [pc, #212]	; (8000e3c <SystemClock_Config+0x148>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000d72:	2327      	movs	r3, #39	; 0x27
 8000d74:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d84:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8c:	2340      	movs	r3, #64	; 0x40
 8000d8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d98:	2360      	movs	r3, #96	; 0x60
 8000d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000da8:	4618      	mov	r0, r3
 8000daa:	f001 fbe9 	bl	8002580 <HAL_RCC_OscConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000db4:	f000 f992 	bl	80010dc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000db8:	236f      	movs	r3, #111	; 0x6f
 8000dba:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 ff5c 	bl	8002c98 <HAL_RCC_ClockConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000de6:	f000 f979 	bl	80010dc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000dea:	f242 1301 	movw	r3, #8449	; 0x2101
 8000dee:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000df0:	2318      	movs	r3, #24
 8000df2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dfe:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000e00:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e04:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000e06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e0a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000e16:	2300      	movs	r3, #0
 8000e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 fb89 	bl	8003538 <HAL_RCCEx_PeriphCLKConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8000e2c:	f000 f956 	bl	80010dc <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000e30:	f002 fcf8 	bl	8003824 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000e34:	bf00      	nop
 8000e36:	37b8      	adds	r7, #184	; 0xb8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	58000400 	.word	0x58000400

08000e40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <MX_TIM1_Init+0xa0>)
 8000e60:	4a20      	ldr	r2, [pc, #128]	; (8000ee4 <MX_TIM1_Init+0xa4>)
 8000e62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_TIM1_Init+0xa0>)
 8000e66:	221f      	movs	r2, #31
 8000e68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_TIM1_Init+0xa0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_TIM1_Init+0xa0>)
 8000e72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_TIM1_Init+0xa0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_TIM1_Init+0xa0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_TIM1_Init+0xa0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e8a:	4815      	ldr	r0, [pc, #84]	; (8000ee0 <MX_TIM1_Init+0xa0>)
 8000e8c:	f002 fde1 	bl	8003a52 <HAL_TIM_Base_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000e96:	f000 f921 	bl	80010dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <MX_TIM1_Init+0xa0>)
 8000ea8:	f002 ff97 	bl	8003dda <HAL_TIM_ConfigClockSource>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000eb2:	f000 f913 	bl	80010dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_TIM1_Init+0xa0>)
 8000ec8:	f003 f976 	bl	80041b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ed2:	f000 f903 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000164 	.word	0x20000164
 8000ee4:	40012c00 	.word	0x40012c00

08000ee8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eec:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000eee:	4a24      	ldr	r2, [pc, #144]	; (8000f80 <MX_USART1_UART_Init+0x98>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ef2:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000efa:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f00:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f08:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f10:	220c      	movs	r2, #12
 8000f12:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f32:	4812      	ldr	r0, [pc, #72]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f34:	f003 f9de 	bl	80042f4 <HAL_UART_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000f3e:	f000 f8cd 	bl	80010dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f42:	2100      	movs	r1, #0
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f46:	f003 fdd1 	bl	8004aec <HAL_UARTEx_SetTxFifoThreshold>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000f50:	f000 f8c4 	bl	80010dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f54:	2100      	movs	r1, #0
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f58:	f003 fe06 	bl	8004b68 <HAL_UARTEx_SetRxFifoThreshold>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000f62:	f000 f8bb 	bl	80010dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_USART1_UART_Init+0x94>)
 8000f68:	f003 fd87 	bl	8004a7a <HAL_UARTEx_DisableFifoMode>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000f72:	f000 f8b3 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200000d4 	.word	0x200000d4
 8000f80:	40013800 	.word	0x40013800

08000f84 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_USB_PCD_Init+0x48>)
 8000f8a:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <MX_USB_PCD_Init+0x4c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_USB_PCD_Init+0x48>)
 8000f90:	2208      	movs	r2, #8
 8000f92:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <MX_USB_PCD_Init+0x48>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_USB_PCD_Init+0x48>)
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MX_USB_PCD_Init+0x48>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_USB_PCD_Init+0x48>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <MX_USB_PCD_Init+0x48>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_USB_PCD_Init+0x48>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_USB_PCD_Init+0x48>)
 8000fba:	f000 fe3d 	bl	8001c38 <HAL_PCD_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000fc4:	f000 f88a 	bl	80010dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200001b0 	.word	0x200001b0
 8000fd0:	40006800 	.word	0x40006800

08000fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe8:	2004      	movs	r0, #4
 8000fea:	f7ff fbd1 	bl	8000790 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff fbce 	bl	8000790 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f7ff fbcb 	bl	8000790 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	2008      	movs	r0, #8
 8000ffc:	f7ff fbc8 	bl	8000790 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_CLK_Pin|SEG_DAT_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	210c      	movs	r1, #12
 8001004:	4831      	ldr	r0, [pc, #196]	; (80010cc <MX_GPIO_Init+0xf8>)
 8001006:	f000 fde7 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Red0_Pin|LED_Red1_Pin|LED_Red2_Pin|LED_Blu_Pin
 800100a:	2200      	movs	r2, #0
 800100c:	213f      	movs	r1, #63	; 0x3f
 800100e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001012:	f000 fde1 	bl	8001bd8 <HAL_GPIO_WritePin>
                          |LED_Ylw_Pin|LED_Grn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2123      	movs	r1, #35	; 0x23
 800101a:	482d      	ldr	r0, [pc, #180]	; (80010d0 <MX_GPIO_Init+0xfc>)
 800101c:	f000 fddc 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_EXTI0_Pin */
  GPIO_InitStruct.Pin = BTN_EXTI0_Pin;
 8001020:	2301      	movs	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <MX_GPIO_Init+0x100>)
 8001026:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001028:	2302      	movs	r3, #2
 800102a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BTN_EXTI0_GPIO_Port, &GPIO_InitStruct);
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4619      	mov	r1, r3
 8001030:	4826      	ldr	r0, [pc, #152]	; (80010cc <MX_GPIO_Init+0xf8>)
 8001032:	f000 fc49 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_CLK_Pin SEG_DAT_Pin */
  GPIO_InitStruct.Pin = SEG_CLK_Pin|SEG_DAT_Pin;
 8001036:	230c      	movs	r3, #12
 8001038:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800103a:	2311      	movs	r3, #17
 800103c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103e:	2301      	movs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4820      	ldr	r0, [pc, #128]	; (80010cc <MX_GPIO_Init+0xf8>)
 800104c:	f000 fc3c 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Red0_Pin LED_Red1_Pin LED_Red2_Pin LED_Blu_Pin
                           LED_Ylw_Pin LED_Grn_Pin */
  GPIO_InitStruct.Pin = LED_Red0_Pin|LED_Red1_Pin|LED_Red2_Pin|LED_Blu_Pin
 8001050:	233f      	movs	r3, #63	; 0x3f
 8001052:	607b      	str	r3, [r7, #4]
                          |LED_Ylw_Pin|LED_Grn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f000 fc2e 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800106c:	2310      	movs	r3, #16
 800106e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4619      	mov	r1, r3
 800107c:	4813      	ldr	r0, [pc, #76]	; (80010cc <MX_GPIO_Init+0xf8>)
 800107e:	f000 fc23 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001082:	2323      	movs	r3, #35	; 0x23
 8001084:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001086:	2301      	movs	r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4619      	mov	r1, r3
 8001096:	480e      	ldr	r0, [pc, #56]	; (80010d0 <MX_GPIO_Init+0xfc>)
 8001098:	f000 fc16 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800109c:	2303      	movs	r3, #3
 800109e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4619      	mov	r1, r3
 80010ac:	480a      	ldr	r0, [pc, #40]	; (80010d8 <MX_GPIO_Init+0x104>)
 80010ae:	f000 fc0b 	bl	80018c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2006      	movs	r0, #6
 80010b8:	f000 fbd1 	bl	800185e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010bc:	2006      	movs	r0, #6
 80010be:	f000 fbe8 	bl	8001892 <HAL_NVIC_EnableIRQ>

}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	48000800 	.word	0x48000800
 80010d0:	48000400 	.word	0x48000400
 80010d4:	10110000 	.word	0x10110000
 80010d8:	48000c00 	.word	0x48000c00

080010dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e0:	b672      	cpsid	i
}
 80010e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <Error_Handler+0x8>

080010e6 <LL_AHB2_GRP1_EnableClock>:
{
 80010e6:	b480      	push	{r7}
 80010e8:	b085      	sub	sp, #20
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4013      	ands	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001124:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001126:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4313      	orrs	r3, r2
 800112e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001134:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800113c:	68fb      	ldr	r3, [r7, #12]
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001156:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001158:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4313      	orrs	r3, r2
 8001160:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001166:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4013      	ands	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <HAL_TIM_Base_MspInit+0x34>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d10b      	bne.n	80011b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800119e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011a2:	f7ff ffd2 	bl	800114a <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2019      	movs	r0, #25
 80011ac:	f000 fb57 	bl	800185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80011b0:	2019      	movs	r0, #25
 80011b2:	f000 fb6e 	bl	8001892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40012c00 	.word	0x40012c00

080011c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_UART_MspInit+0x58>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d116      	bne.n	8001214 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80011ea:	f7ff ffae 	bl	800114a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2002      	movs	r0, #2
 80011f0:	f7ff ff79 	bl	80010e6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011f4:	23c0      	movs	r3, #192	; 0xc0
 80011f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001204:	2307      	movs	r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	4804      	ldr	r0, [pc, #16]	; (8001220 <HAL_UART_MspInit+0x5c>)
 8001210:	f000 fb5a 	bl	80018c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40013800 	.word	0x40013800
 8001220:	48000400 	.word	0x48000400

08001224 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_PCD_MspInit+0x5c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d118      	bne.n	8001278 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2001      	movs	r0, #1
 8001248:	f7ff ff4d 	bl	80010e6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800124c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001250:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800125e:	230a      	movs	r3, #10
 8001260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126c:	f000 fb2c 	bl	80018c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001270:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001274:	f7ff ff50 	bl	8001118 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	3720      	adds	r7, #32
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40006800 	.word	0x40006800

08001284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <NMI_Handler+0x4>

0800128a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <MemManage_Handler+0x4>

08001296 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d0:	f000 f9be 	bl	8001650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012dc:	2001      	movs	r0, #1
 80012de:	f000 fc93 	bl	8001c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80012ee:	f002 fc55 	bl	8003b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000164 	.word	0x20000164

080012fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	return 1;
 8001300:	2301      	movs	r3, #1
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_kill>:

int _kill(int pid, int sig)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001316:	f003 fcef 	bl	8004cf8 <__errno>
 800131a:	4603      	mov	r3, r0
 800131c:	2216      	movs	r2, #22
 800131e:	601a      	str	r2, [r3, #0]
	return -1;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_exit>:

void _exit (int status)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ffe7 	bl	800130c <_kill>
	while (1) {}		/* Make sure we hang here */
 800133e:	e7fe      	b.n	800133e <_exit+0x12>

08001340 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e00a      	b.n	8001368 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001352:	f3af 8000 	nop.w
 8001356:	4601      	mov	r1, r0
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	60ba      	str	r2, [r7, #8]
 800135e:	b2ca      	uxtb	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	dbf0      	blt.n	8001352 <_read+0x12>
	}

return len;
 8001370:	687b      	ldr	r3, [r7, #4]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e009      	b.n	80013a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	60ba      	str	r2, [r7, #8]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dbf1      	blt.n	800138c <_write+0x12>
	}
	return len;
 80013a8:	687b      	ldr	r3, [r7, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_close>:

int _close(int file)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
	return -1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013da:	605a      	str	r2, [r3, #4]
	return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_isatty>:

int _isatty(int file)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
	return 1;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
	return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800144c:	f003 fc54 	bl	8004cf8 <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	220c      	movs	r2, #12
 8001454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e009      	b.n	8001470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <_sbrk+0x64>)
 800146c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20030000 	.word	0x20030000
 800147c:	00000400 	.word	0x00000400
 8001480:	200000c8 	.word	0x200000c8
 8001484:	200004b8 	.word	0x200004b8

08001488 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <SystemInit+0x98>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <SystemInit+0x98>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800149c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80014b4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <SystemInit+0x9c>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80014c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014d2:	f023 0305 	bic.w	r3, r3, #5
 80014d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80014da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f2:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <SystemInit+0xa0>)
 80014f4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80014f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <SystemInit+0xa0>)
 80014fc:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800150e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00
 8001524:	faf6fefb 	.word	0xfaf6fefb
 8001528:	22041000 	.word	0x22041000

0800152c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800152c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001530:	3304      	adds	r3, #4

08001532 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001532:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001534:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001536:	d3f9      	bcc.n	800152c <CopyDataInit>
  bx lr
 8001538:	4770      	bx	lr

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800153a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800153c:	3004      	adds	r0, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800153e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>
  bx lr
 8001542:	4770      	bx	lr

08001544 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001546:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001548:	f7ff ff9e 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <LoopForever+0x8>)
 800154e:	490c      	ldr	r1, [pc, #48]	; (8001580 <LoopForever+0xc>)
 8001550:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <LoopForever+0x10>)
 8001552:	2300      	movs	r3, #0
 8001554:	f7ff ffed 	bl	8001532 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <LoopForever+0x14>)
 800155a:	490c      	ldr	r1, [pc, #48]	; (800158c <LoopForever+0x18>)
 800155c:	2300      	movs	r3, #0
 800155e:	f7ff ffee 	bl	800153e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001562:	480b      	ldr	r0, [pc, #44]	; (8001590 <LoopForever+0x1c>)
 8001564:	490b      	ldr	r1, [pc, #44]	; (8001594 <LoopForever+0x20>)
 8001566:	2300      	movs	r3, #0
 8001568:	f7ff ffe9 	bl	800153e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800156c:	f003 fbca 	bl	8004d04 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001570:	f7ff fb9e 	bl	8000cb0 <main>

08001574 <LoopForever>:

LoopForever:
  b LoopForever
 8001574:	e7fe      	b.n	8001574 <LoopForever>
 8001576:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001578:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800157c:	20000004 	.word	0x20000004
 8001580:	20000088 	.word	0x20000088
 8001584:	08005fc8 	.word	0x08005fc8
  INIT_BSS _sbss, _ebss
 8001588:	20000088 	.word	0x20000088
 800158c:	200004b8 	.word	0x200004b8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001590:	20030000 	.word	0x20030000
 8001594:	20030000 	.word	0x20030000

08001598 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001598:	e7fe      	b.n	8001598 <ADC1_IRQHandler>
	...

0800159c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_Init+0x3c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <HAL_Init+0x3c>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b2:	2003      	movs	r0, #3
 80015b4:	f000 f948 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b8:	2000      	movs	r0, #0
 80015ba:	f000 f80f 	bl	80015dc <HAL_InitTick>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	e001      	b.n	80015ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ca:	f7ff fdd7 	bl	800117c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	58004000 	.word	0x58004000

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_InitTick+0x6c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d024      	beq.n	800163a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015f0:	f001 fcfe 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_InitTick+0x6c>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	4619      	mov	r1, r3
 80015fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001600:	fbb3 f3f1 	udiv	r3, r3, r1
 8001604:	fbb2 f3f3 	udiv	r3, r2, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f950 	bl	80018ae <HAL_SYSTICK_Config>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10f      	bne.n	8001634 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b0f      	cmp	r3, #15
 8001618:	d809      	bhi.n	800162e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161a:	2200      	movs	r2, #0
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	f04f 30ff 	mov.w	r0, #4294967295
 8001622:	f000 f91c 	bl	800185e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001626:	4a09      	ldr	r2, [pc, #36]	; (800164c <HAL_InitTick+0x70>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	e007      	b.n	800163e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	e004      	b.n	800163e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	e001      	b.n	800163e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000020 	.word	0x20000020
 800164c:	2000001c 	.word	0x2000001c

08001650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x20>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x24>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_IncTick+0x24>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000020 	.word	0x20000020
 8001674:	200004a4 	.word	0x200004a4

08001678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return uwTick;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <HAL_GetTick+0x14>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	200004a4 	.word	0x200004a4

08001690 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetTickPrio+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	2000001c 	.word	0x2000001c

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4907      	ldr	r1, [pc, #28]	; (8001744 <__NVIC_EnableIRQ+0x38>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f7ff ff8e 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff29 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff40 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff90 	bl	800179c <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5f 	bl	8001748 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff33 	bl	800170c <__NVIC_EnableIRQ>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffa4 	bl	8001804 <SysTick_Config>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d6:	e14c      	b.n	8001b72 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 813e 	beq.w	8001b6c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d00b      	beq.n	8001910 <HAL_GPIO_Init+0x48>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d007      	beq.n	8001910 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001904:	2b11      	cmp	r3, #17
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b12      	cmp	r3, #18
 800190e:	d130      	bne.n	8001972 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001946:	2201      	movs	r2, #1
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	091b      	lsrs	r3, r3, #4
 800195c:	f003 0201 	and.w	r2, r3, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	2203      	movs	r2, #3
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0xea>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b12      	cmp	r3, #18
 80019b0:	d123      	bne.n	80019fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	08da      	lsrs	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3208      	adds	r2, #8
 80019ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	220f      	movs	r2, #15
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	691a      	ldr	r2, [r3, #16]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	08da      	lsrs	r2, r3, #3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3208      	adds	r2, #8
 80019f4:	6939      	ldr	r1, [r7, #16]
 80019f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0203 	and.w	r2, r3, #3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8098 	beq.w	8001b6c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a3c:	4a54      	ldr	r2, [pc, #336]	; (8001b90 <HAL_GPIO_Init+0x2c8>)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a66:	d019      	beq.n	8001a9c <HAL_GPIO_Init+0x1d4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a4a      	ldr	r2, [pc, #296]	; (8001b94 <HAL_GPIO_Init+0x2cc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d013      	beq.n	8001a98 <HAL_GPIO_Init+0x1d0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a49      	ldr	r2, [pc, #292]	; (8001b98 <HAL_GPIO_Init+0x2d0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d00d      	beq.n	8001a94 <HAL_GPIO_Init+0x1cc>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a48      	ldr	r2, [pc, #288]	; (8001b9c <HAL_GPIO_Init+0x2d4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d007      	beq.n	8001a90 <HAL_GPIO_Init+0x1c8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a47      	ldr	r2, [pc, #284]	; (8001ba0 <HAL_GPIO_Init+0x2d8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d101      	bne.n	8001a8c <HAL_GPIO_Init+0x1c4>
 8001a88:	2304      	movs	r3, #4
 8001a8a:	e008      	b.n	8001a9e <HAL_GPIO_Init+0x1d6>
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	e006      	b.n	8001a9e <HAL_GPIO_Init+0x1d6>
 8001a90:	2303      	movs	r3, #3
 8001a92:	e004      	b.n	8001a9e <HAL_GPIO_Init+0x1d6>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_Init+0x1d6>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_GPIO_Init+0x1d6>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	f002 0203 	and.w	r2, r2, #3
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4093      	lsls	r3, r2
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aae:	4938      	ldr	r1, [pc, #224]	; (8001b90 <HAL_GPIO_Init+0x2c8>)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001abc:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <HAL_GPIO_Init+0x2dc>)
 8001abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ae2:	4a30      	ldr	r2, [pc, #192]	; (8001ba4 <HAL_GPIO_Init+0x2dc>)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <HAL_GPIO_Init+0x2dc>)
 8001aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b10:	4a24      	ldr	r2, [pc, #144]	; (8001ba4 <HAL_GPIO_Init+0x2dc>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <HAL_GPIO_Init+0x2dc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b3c:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_GPIO_Init+0x2dc>)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_GPIO_Init+0x2dc>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b66:	4a0f      	ldr	r2, [pc, #60]	; (8001ba4 <HAL_GPIO_Init+0x2dc>)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f47f aeab 	bne.w	80018d8 <HAL_GPIO_Init+0x10>
  }
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40010000 	.word	0x40010000
 8001b94:	48000400 	.word	0x48000400
 8001b98:	48000800 	.word	0x48000800
 8001b9c:	48000c00 	.word	0x48000c00
 8001ba0:	48001000 	.word	0x48001000
 8001ba4:	58000800 	.word	0x58000800

08001ba8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e001      	b.n	8001bca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be8:	787b      	ldrb	r3, [r7, #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe ffb8 	bl	8000b9c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	58000800 	.word	0x58000800

08001c38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3a:	b08b      	sub	sp, #44	; 0x2c
 8001c3c:	af06      	add	r7, sp, #24
 8001c3e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e0d7      	b.n	8001dfa <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fae0 	bl	8001224 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2203      	movs	r2, #3
 8001c68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 f805 	bl	8004c80 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
 8001c7a:	e04c      	b.n	8001d16 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	b298      	uxth	r0, r3
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3336      	adds	r3, #54	; 0x36
 8001cba:	4602      	mov	r2, r0
 8001cbc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	1c5a      	adds	r2, r3, #1
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	3303      	adds	r3, #3
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3338      	adds	r3, #56	; 0x38
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	333c      	adds	r3, #60	; 0x3c
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	3340      	adds	r3, #64	; 0x40
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	3301      	adds	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3ad      	bcc.n	8001c7c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e044      	b.n	8001db0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	440b      	add	r3, r1
 8001d34:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	440b      	add	r3, r1
 8001d60:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	3301      	adds	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3b5      	bcc.n	8001d26 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	687e      	ldr	r6, [r7, #4]
 8001dc2:	466d      	mov	r5, sp
 8001dc4:	f106 0410 	add.w	r4, r6, #16
 8001dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	602b      	str	r3, [r5, #0]
 8001dd0:	1d33      	adds	r3, r6, #4
 8001dd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dd4:	6838      	ldr	r0, [r7, #0]
 8001dd6:	f002 ff6e 	bl	8004cb6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d102      	bne.n	8001df8 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f805 	bl	8001e02 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e02 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	58000400 	.word	0x58000400

08001e78 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	58000400 	.word	0x58000400

08001e94 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ea6:	d101      	bne.n	8001eac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_RCC_HSE_Enable>:
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_RCC_HSE_Disable>:
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_RCC_HSE_IsReady>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f06:	d101      	bne.n	8001f0c <LL_RCC_HSE_IsReady+0x18>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <LL_RCC_HSE_IsReady+0x1a>
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_RCC_HSI_Enable>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_RCC_HSI_Disable>:
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f48:	6013      	str	r3, [r2, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_RCC_HSI_IsReady>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f66:	d101      	bne.n	8001f6c <LL_RCC_HSI_IsReady+0x18>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <LL_RCC_HSI_IsReady+0x1a>
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	061b      	lsls	r3, r3, #24
 8001f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_RCC_HSI48_Enable>:
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_RCC_HSI48_Disable>:
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_RCC_HSI48_IsReady>:
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d101      	bne.n	8001ffe <LL_RCC_HSI48_IsReady+0x18>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_RCC_HSI48_IsReady+0x1a>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_RCC_LSE_Enable>:
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_RCC_LSE_Disable>:
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_RCC_LSE_EnableBypass>:
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_RCC_LSE_DisableBypass>:
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d101      	bne.n	80020aa <LL_RCC_LSE_IsReady+0x18>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <LL_RCC_LSE_IsReady+0x1a>
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80020ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80020fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b02      	cmp	r3, #2
 800210c:	d101      	bne.n	8002112 <LL_RCC_LSI1_IsReady+0x18>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_RCC_LSI1_IsReady+0x1a>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002150:	f023 0304 	bic.w	r3, r3, #4
 8002154:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b08      	cmp	r3, #8
 8002174:	d101      	bne.n	800217a <LL_RCC_LSI2_IsReady+0x18>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <LL_RCC_LSI2_IsReady+0x1a>
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800218e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002196:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80021b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80021d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	6013      	str	r3, [r2, #0]
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80021f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d101      	bne.n	8002206 <LL_RCC_MSI_IsReady+0x16>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <LL_RCC_MSI_IsReady+0x18>
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800221a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800224a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2bb0      	cmp	r3, #176	; 0xb0
 8002250:	d901      	bls.n	8002256 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002252:	23b0      	movs	r3, #176	; 0xb0
 8002254:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002256:	687b      	ldr	r3, [r7, #4]
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800226c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f023 0203 	bic.w	r2, r3, #3
 80022a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 030c 	and.w	r3, r3, #12
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80022d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80022fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002302:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002306:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800230a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800232a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002332:	f023 020f 	bic.w	r2, r3, #15
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800238a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4313      	orrs	r3, r2
 8002392:	608b      	str	r3, [r1, #8]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80023a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80023bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80023d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002430:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002434:	6013      	str	r3, [r2, #0]
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002452:	d101      	bne.n	8002458 <LL_RCC_PLL_IsReady+0x18>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <LL_RCC_PLL_IsReady+0x1a>
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0303 	and.w	r3, r3, #3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80024ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d8:	d101      	bne.n	80024de <LL_RCC_IsActiveFlag_HPRE+0x18>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024fe:	d101      	bne.n	8002504 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002518:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800251c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002524:	d101      	bne.n	800252a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800253a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002548:	d101      	bne.n	800254e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800255e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002568:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800256c:	d101      	bne.n	8002572 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b08d      	sub	sp, #52	; 0x34
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e37e      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8092 	beq.w	80026c4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a0:	f7ff fe89 	bl	80022b6 <LL_RCC_GetSysClkSource>
 80025a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a6:	f7ff ff82 	bl	80024ae <LL_RCC_PLL_GetMainSource>
 80025aa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_RCC_OscConfig+0x3e>
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	2b0c      	cmp	r3, #12
 80025b6:	d14c      	bne.n	8002652 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d149      	bne.n	8002652 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025be:	f7ff fe17 	bl	80021f0 <LL_RCC_MSI_IsReady>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_OscConfig+0x54>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e35d      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80025d8:	f7ff fe2f 	bl	800223a <LL_RCC_MSI_GetRange>
 80025dc:	4603      	mov	r3, r0
 80025de:	429c      	cmp	r4, r3
 80025e0:	d914      	bls.n	800260c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fd42 	bl	8003070 <RCC_SetFlashLatencyFromMSIRange>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e34c      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fe09 	bl	8002212 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fe2d 	bl	8002264 <LL_RCC_MSI_SetCalibTrimming>
 800260a:	e013      	b.n	8002634 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fdfe 	bl	8002212 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fe22 	bl	8002264 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fd23 	bl	8003070 <RCC_SetFlashLatencyFromMSIRange>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e32d      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002634:	f000 fcdc 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8002638:	4603      	mov	r3, r0
 800263a:	4ab3      	ldr	r2, [pc, #716]	; (8002908 <HAL_RCC_OscConfig+0x388>)
 800263c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800263e:	4bb3      	ldr	r3, [pc, #716]	; (800290c <HAL_RCC_OscConfig+0x38c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe ffca 	bl	80015dc <HAL_InitTick>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d039      	beq.n	80026c2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e31e      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01e      	beq.n	8002698 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800265a:	f7ff fdab 	bl	80021b4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800265e:	f7ff f80b 	bl	8001678 <HAL_GetTick>
 8002662:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002666:	f7ff f807 	bl	8001678 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e30b      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002678:	f7ff fdba 	bl	80021f0 <LL_RCC_MSI_IsReady>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f1      	beq.n	8002666 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fdc3 	bl	8002212 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fde7 	bl	8002264 <LL_RCC_MSI_SetCalibTrimming>
 8002696:	e015      	b.n	80026c4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002698:	f7ff fd9b 	bl	80021d2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800269c:	f7fe ffec 	bl	8001678 <HAL_GetTick>
 80026a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a4:	f7fe ffe8 	bl	8001678 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e2ec      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80026b6:	f7ff fd9b 	bl	80021f0 <LL_RCC_MSI_IsReady>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f1      	bne.n	80026a4 <HAL_RCC_OscConfig+0x124>
 80026c0:	e000      	b.n	80026c4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d04e      	beq.n	800276e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d0:	f7ff fdf1 	bl	80022b6 <LL_RCC_GetSysClkSource>
 80026d4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d6:	f7ff feea 	bl	80024ae <LL_RCC_PLL_GetMainSource>
 80026da:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x16e>
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	d10d      	bne.n	8002704 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d10a      	bne.n	8002704 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ee:	f7ff fc01 	bl	8001ef4 <LL_RCC_HSE_IsReady>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d039      	beq.n	800276c <HAL_RCC_OscConfig+0x1ec>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d135      	bne.n	800276c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e2c5      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d102      	bne.n	8002714 <HAL_RCC_OscConfig+0x194>
 800270e:	f7ff fbd3 	bl	8001eb8 <LL_RCC_HSE_Enable>
 8002712:	e001      	b.n	8002718 <HAL_RCC_OscConfig+0x198>
 8002714:	f7ff fbdf 	bl	8001ed6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d012      	beq.n	8002746 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe ffaa 	bl	8001678 <HAL_GetTick>
 8002724:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7fe ffa6 	bl	8001678 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e2aa      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800273a:	f7ff fbdb 	bl	8001ef4 <LL_RCC_HSE_IsReady>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f1      	beq.n	8002728 <HAL_RCC_OscConfig+0x1a8>
 8002744:	e013      	b.n	800276e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002746:	f7fe ff97 	bl	8001678 <HAL_GetTick>
 800274a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274e:	f7fe ff93 	bl	8001678 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b64      	cmp	r3, #100	; 0x64
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e297      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002760:	f7ff fbc8 	bl	8001ef4 <LL_RCC_HSE_IsReady>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f1      	bne.n	800274e <HAL_RCC_OscConfig+0x1ce>
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d051      	beq.n	800281e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277a:	f7ff fd9c 	bl	80022b6 <LL_RCC_GetSysClkSource>
 800277e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002780:	f7ff fe95 	bl	80024ae <LL_RCC_PLL_GetMainSource>
 8002784:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d005      	beq.n	8002798 <HAL_RCC_OscConfig+0x218>
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d113      	bne.n	80027ba <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d110      	bne.n	80027ba <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002798:	f7ff fbdc 	bl	8001f54 <LL_RCC_HSI_IsReady>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x22e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e270      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fbe0 	bl	8001f78 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b8:	e031      	b.n	800281e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d019      	beq.n	80027f6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c2:	f7ff fba9 	bl	8001f18 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7fe ff57 	bl	8001678 <HAL_GetTick>
 80027ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ce:	f7fe ff53 	bl	8001678 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e257      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80027e0:	f7ff fbb8 	bl	8001f54 <LL_RCC_HSI_IsReady>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f1      	beq.n	80027ce <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fbc2 	bl	8001f78 <LL_RCC_HSI_SetCalibTrimming>
 80027f4:	e013      	b.n	800281e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f6:	f7ff fb9e 	bl	8001f36 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fe ff3d 	bl	8001678 <HAL_GetTick>
 80027fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002802:	f7fe ff39 	bl	8001678 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e23d      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002814:	f7ff fb9e 	bl	8001f54 <LL_RCC_HSI_IsReady>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f1      	bne.n	8002802 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80a3 	beq.w	800297e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d076      	beq.n	800292e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	d046      	beq.n	80028da <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800284c:	f7ff fc55 	bl	80020fa <LL_RCC_LSI1_IsReady>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d113      	bne.n	800287e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002856:	f7ff fc2e 	bl	80020b6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800285a:	f7fe ff0d 	bl	8001678 <HAL_GetTick>
 800285e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002862:	f7fe ff09 	bl	8001678 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e20d      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002874:	f7ff fc41 	bl	80020fa <LL_RCC_LSI1_IsReady>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f1      	beq.n	8002862 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800287e:	f7ff fc4e 	bl	800211e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe fef9 	bl	8001678 <HAL_GetTick>
 8002886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800288a:	f7fe fef5 	bl	8001678 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b03      	cmp	r3, #3
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1f9      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800289c:	f7ff fc61 	bl	8002162 <LL_RCC_LSI2_IsReady>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f1      	beq.n	800288a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fc6b 	bl	8002186 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80028b0:	f7ff fc12 	bl	80020d8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe fee0 	bl	8001678 <HAL_GetTick>
 80028b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028bc:	f7fe fedc 	bl	8001678 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1e0      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80028ce:	f7ff fc14 	bl	80020fa <LL_RCC_LSI1_IsReady>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f1      	bne.n	80028bc <HAL_RCC_OscConfig+0x33c>
 80028d8:	e051      	b.n	800297e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80028da:	f7ff fbec 	bl	80020b6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe fecb 	bl	8001678 <HAL_GetTick>
 80028e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80028e6:	f7fe fec7 	bl	8001678 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e1cb      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80028f8:	f7ff fbff 	bl	80020fa <LL_RCC_LSI1_IsReady>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f1      	beq.n	80028e6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002902:	f7ff fc1d 	bl	8002140 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002906:	e00c      	b.n	8002922 <HAL_RCC_OscConfig+0x3a2>
 8002908:	20000018 	.word	0x20000018
 800290c:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002910:	f7fe feb2 	bl	8001678 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b03      	cmp	r3, #3
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1b6      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002922:	f7ff fc1e 	bl	8002162 <LL_RCC_LSI2_IsReady>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f1      	bne.n	8002910 <HAL_RCC_OscConfig+0x390>
 800292c:	e027      	b.n	800297e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800292e:	f7ff fc07 	bl	8002140 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002932:	f7fe fea1 	bl	8001678 <HAL_GetTick>
 8002936:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800293a:	f7fe fe9d 	bl	8001678 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b03      	cmp	r3, #3
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1a1      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800294c:	f7ff fc09 	bl	8002162 <LL_RCC_LSI2_IsReady>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f1      	bne.n	800293a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002956:	f7ff fbbf 	bl	80020d8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295a:	f7fe fe8d 	bl	8001678 <HAL_GetTick>
 800295e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002962:	f7fe fe89 	bl	8001678 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e18d      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002974:	f7ff fbc1 	bl	80020fa <LL_RCC_LSI1_IsReady>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f1      	bne.n	8002962 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	d05b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298a:	4bb5      	ldr	r3, [pc, #724]	; (8002c60 <HAL_RCC_OscConfig+0x6e0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d114      	bne.n	80029c0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002996:	f7ff fa5f 	bl	8001e58 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299a:	f7fe fe6d 	bl	8001678 <HAL_GetTick>
 800299e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a2:	f7fe fe69 	bl	8001678 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e16d      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b4:	4baa      	ldr	r3, [pc, #680]	; (8002c60 <HAL_RCC_OscConfig+0x6e0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d102      	bne.n	80029ce <HAL_RCC_OscConfig+0x44e>
 80029c8:	f7ff fb1f 	bl	800200a <LL_RCC_LSE_Enable>
 80029cc:	e00c      	b.n	80029e8 <HAL_RCC_OscConfig+0x468>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d104      	bne.n	80029e0 <HAL_RCC_OscConfig+0x460>
 80029d6:	f7ff fb3a 	bl	800204e <LL_RCC_LSE_EnableBypass>
 80029da:	f7ff fb16 	bl	800200a <LL_RCC_LSE_Enable>
 80029de:	e003      	b.n	80029e8 <HAL_RCC_OscConfig+0x468>
 80029e0:	f7ff fb24 	bl	800202c <LL_RCC_LSE_Disable>
 80029e4:	f7ff fb44 	bl	8002070 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d014      	beq.n	8002a1a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fe fe42 	bl	8001678 <HAL_GetTick>
 80029f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fe fe3e 	bl	8001678 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e140      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a0e:	f7ff fb40 	bl	8002092 <LL_RCC_LSE_IsReady>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ef      	beq.n	80029f8 <HAL_RCC_OscConfig+0x478>
 8002a18:	e013      	b.n	8002a42 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fe2d 	bl	8001678 <HAL_GetTick>
 8002a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe fe29 	bl	8001678 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e12b      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002a38:	f7ff fb2b 	bl	8002092 <LL_RCC_LSE_IsReady>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1ef      	bne.n	8002a22 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d02c      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d014      	beq.n	8002a80 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a56:	f7ff faa4 	bl	8001fa2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fe0d 	bl	8001678 <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a62:	f7fe fe09 	bl	8001678 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e10d      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002a74:	f7ff fab7 	bl	8001fe6 <LL_RCC_HSI48_IsReady>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f1      	beq.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
 8002a7e:	e013      	b.n	8002aa8 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a80:	f7ff faa0 	bl	8001fc4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe fdf8 	bl	8001678 <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a8c:	f7fe fdf4 	bl	8001678 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e0f8      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002a9e:	f7ff faa2 	bl	8001fe6 <LL_RCC_HSI48_IsReady>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f1      	bne.n	8002a8c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80ee 	beq.w	8002c8e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab2:	f7ff fc00 	bl	80022b6 <LL_RCC_GetSysClkSource>
 8002ab6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	f040 80af 	bne.w	8002c28 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f003 0203 	and.w	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d123      	bne.n	8002b20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d114      	bne.n	8002b20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d10d      	bne.n	8002b20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d106      	bne.n	8002b20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d05d      	beq.n	8002bdc <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d058      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0ab      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b38:	f7ff fc73 	bl	8002422 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b3c:	f7fe fd9c 	bl	8001678 <HAL_GetTick>
 8002b40:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe fd98 	bl	8001678 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e09c      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ef      	bne.n	8002b44 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	4b3e      	ldr	r3, [pc, #248]	; (8002c64 <HAL_RCC_OscConfig+0x6e4>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b76:	4311      	orrs	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b7c:	0212      	lsls	r2, r2, #8
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b84:	4311      	orrs	r1, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b8a:	4311      	orrs	r1, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b90:	430a      	orrs	r2, r1
 8002b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b9a:	f7ff fc33 	bl	8002404 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bae:	f7fe fd63 	bl	8001678 <HAL_GetTick>
 8002bb2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7fe fd5f 	bl	8001678 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e063      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ef      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd6:	e05a      	b.n	8002c8e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e059      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d151      	bne.n	8002c8e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bea:	f7ff fc0b 	bl	8002404 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bfe:	f7fe fd3b 	bl	8001678 <HAL_GetTick>
 8002c02:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c06:	f7fe fd37 	bl	8001678 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e03b      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0ef      	beq.n	8002c06 <HAL_RCC_OscConfig+0x686>
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d02d      	beq.n	8002c8a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2e:	f7ff fbf8 	bl	8002422 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c3c:	f023 0303 	bic.w	r3, r3, #3
 8002c40:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c4c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c54:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fd0f 	bl	8001678 <HAL_GetTick>
 8002c5a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5c:	e00d      	b.n	8002c7a <HAL_RCC_OscConfig+0x6fa>
 8002c5e:	bf00      	nop
 8002c60:	58000400 	.word	0x58000400
 8002c64:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe fd06 	bl	8001678 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1ef      	bne.n	8002c68 <HAL_RCC_OscConfig+0x6e8>
 8002c88:	e001      	b.n	8002c8e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3734      	adds	r7, #52	; 0x34
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd90      	pop	{r4, r7, pc}

08002c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e12d      	b.n	8002f08 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b98      	ldr	r3, [pc, #608]	; (8002f10 <HAL_RCC_ClockConfig+0x278>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d91b      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b95      	ldr	r3, [pc, #596]	; (8002f10 <HAL_RCC_ClockConfig+0x278>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 0207 	bic.w	r2, r3, #7
 8002cc2:	4993      	ldr	r1, [pc, #588]	; (8002f10 <HAL_RCC_ClockConfig+0x278>)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cca:	f7fe fcd5 	bl	8001678 <HAL_GetTick>
 8002cce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002cd2:	f7fe fcd1 	bl	8001678 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e111      	b.n	8002f08 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce4:	4b8a      	ldr	r3, [pc, #552]	; (8002f10 <HAL_RCC_ClockConfig+0x278>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d1ef      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fae3 	bl	80022ce <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d08:	f7fe fcb6 	bl	8001678 <HAL_GetTick>
 8002d0c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d10:	f7fe fcb2 	bl	8001678 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e0f2      	b.n	8002f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d22:	f7ff fbd0 	bl	80024c6 <LL_RCC_IsActiveFlag_HPRE>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f1      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d016      	beq.n	8002d66 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fada 	bl	80022f6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d42:	f7fe fc99 	bl	8001678 <HAL_GetTick>
 8002d46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d4a:	f7fe fc95 	bl	8001678 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e0d5      	b.n	8002f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d5c:	f7ff fbc5 	bl	80024ea <LL_RCC_IsActiveFlag_C2HPRE>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f1      	beq.n	8002d4a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d016      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fad3 	bl	8002322 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d7c:	f7fe fc7c 	bl	8001678 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d84:	f7fe fc78 	bl	8001678 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0b8      	b.n	8002f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d96:	f7ff fbbb 	bl	8002510 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f1      	beq.n	8002d84 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d016      	beq.n	8002dda <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff facd 	bl	8002350 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002db6:	f7fe fc5f 	bl	8001678 <HAL_GetTick>
 8002dba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dbe:	f7fe fc5b 	bl	8001678 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e09b      	b.n	8002f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002dd0:	f7ff fbb1 	bl	8002536 <LL_RCC_IsActiveFlag_PPRE1>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f1      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d017      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fac3 	bl	8002378 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002df2:	f7fe fc41 	bl	8001678 <HAL_GetTick>
 8002df6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dfa:	f7fe fc3d 	bl	8001678 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e07d      	b.n	8002f08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e0c:	f7ff fba5 	bl	800255a <LL_RCC_IsActiveFlag_PPRE2>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f1      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d043      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d106      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002e2a:	f7ff f863 	bl	8001ef4 <LL_RCC_HSE_IsReady>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d11e      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e067      	b.n	8002f08 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d106      	bne.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002e40:	f7ff fafe 	bl	8002440 <LL_RCC_PLL_IsReady>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d113      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e05c      	b.n	8002f08 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002e56:	f7ff f9cb 	bl	80021f0 <LL_RCC_MSI_IsReady>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d108      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e051      	b.n	8002f08 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002e64:	f7ff f876 	bl	8001f54 <LL_RCC_HSI_IsReady>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e04a      	b.n	8002f08 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fa09 	bl	800228e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e7c:	f7fe fbfc 	bl	8001678 <HAL_GetTick>
 8002e80:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e84:	f7fe fbf8 	bl	8001678 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e036      	b.n	8002f08 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	f7ff fa0c 	bl	80022b6 <LL_RCC_GetSysClkSource>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d1ec      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eaa:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_RCC_ClockConfig+0x278>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d21b      	bcs.n	8002ef0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb8:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <HAL_RCC_ClockConfig+0x278>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 0207 	bic.w	r2, r3, #7
 8002ec0:	4913      	ldr	r1, [pc, #76]	; (8002f10 <HAL_RCC_ClockConfig+0x278>)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec8:	f7fe fbd6 	bl	8001678 <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ed0:	f7fe fbd2 	bl	8001678 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e012      	b.n	8002f08 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_ClockConfig+0x278>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d1ef      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ef0:	f000 f87e 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4a07      	ldr	r2, [pc, #28]	; (8002f14 <HAL_RCC_ClockConfig+0x27c>)
 8002ef8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002efa:	f7fe fbc9 	bl	8001690 <HAL_GetTickPrio>
 8002efe:	4603      	mov	r3, r0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe fb6b 	bl	80015dc <HAL_InitTick>
 8002f06:	4603      	mov	r3, r0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	58004000 	.word	0x58004000
 8002f14:	20000018 	.word	0x20000018

08002f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1e:	f7ff f9ca 	bl	80022b6 <LL_RCC_GetSysClkSource>
 8002f22:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10a      	bne.n	8002f40 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f2a:	f7ff f986 	bl	800223a <LL_RCC_MSI_GetRange>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	4a2b      	ldr	r2, [pc, #172]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	e04b      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d102      	bne.n	8002f4c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e045      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d10a      	bne.n	8002f68 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f52:	f7fe ff9f 	bl	8001e94 <LL_RCC_HSE_IsEnabledDiv2>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d102      	bne.n	8002f62 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e03a      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002f62:	4b22      	ldr	r3, [pc, #136]	; (8002fec <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	e037      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002f68:	f7ff faa1 	bl	80024ae <LL_RCC_PLL_GetMainSource>
 8002f6c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d003      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x64>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d003      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x6a>
 8002f7a:	e00d      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f7e:	60bb      	str	r3, [r7, #8]
        break;
 8002f80:	e015      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f82:	f7fe ff87 	bl	8001e94 <LL_RCC_HSE_IsEnabledDiv2>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d102      	bne.n	8002f92 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002f8c:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f8e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002f90:	e00d      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f94:	60bb      	str	r3, [r7, #8]
        break;
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002f98:	f7ff f94f 	bl	800223a <LL_RCC_MSI_GetRange>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002faa:	60bb      	str	r3, [r7, #8]
        break;
 8002fac:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002fae:	f7ff fa59 	bl	8002464 <LL_RCC_PLL_GetN>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	fb03 f402 	mul.w	r4, r3, r2
 8002fba:	f7ff fa6c 	bl	8002496 <LL_RCC_PLL_GetDivider>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	fbb4 f4f3 	udiv	r4, r4, r3
 8002fc8:	f7ff fa59 	bl	800247e <LL_RCC_PLL_GetR>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	0f5b      	lsrs	r3, r3, #29
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	fbb4 f3f3 	udiv	r3, r4, r3
 8002fd6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	08005e04 	.word	0x08005e04
 8002fe8:	00f42400 	.word	0x00f42400
 8002fec:	01e84800 	.word	0x01e84800

08002ff0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff0:	b598      	push	{r3, r4, r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002ff4:	f7ff ff90 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	f7ff f9d1 	bl	80023a0 <LL_RCC_GetAHBPrescaler>
 8002ffe:	4603      	mov	r3, r0
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	4a03      	ldr	r2, [pc, #12]	; (8003014 <HAL_RCC_GetHCLKFreq+0x24>)
 8003008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd98      	pop	{r3, r4, r7, pc}
 8003014:	08005da4 	.word	0x08005da4

08003018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003018:	b598      	push	{r3, r4, r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800301c:	f7ff ffe8 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8003020:	4604      	mov	r4, r0
 8003022:	f7ff f9d7 	bl	80023d4 <LL_RCC_GetAPB1Prescaler>
 8003026:	4603      	mov	r3, r0
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	fa24 f303 	lsr.w	r3, r4, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd98      	pop	{r3, r4, r7, pc}
 8003040:	08005de4 	.word	0x08005de4

08003044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003044:	b598      	push	{r3, r4, r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003048:	f7ff ffd2 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 800304c:	4604      	mov	r4, r0
 800304e:	f7ff f9cd 	bl	80023ec <LL_RCC_GetAPB2Prescaler>
 8003052:	4603      	mov	r3, r0
 8003054:	0adb      	lsrs	r3, r3, #11
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	4a04      	ldr	r2, [pc, #16]	; (800306c <HAL_RCC_GetPCLK2Freq+0x28>)
 800305c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd98      	pop	{r3, r4, r7, pc}
 800306c:	08005de4 	.word	0x08005de4

08003070 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2bb0      	cmp	r3, #176	; 0xb0
 800307c:	d903      	bls.n	8003086 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	e007      	b.n	8003096 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	4a11      	ldr	r2, [pc, #68]	; (80030d4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003094:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003096:	f7ff f98f 	bl	80023b8 <LL_RCC_GetAHB4Prescaler>
 800309a:	4603      	mov	r3, r0
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	4a0d      	ldr	r2, [pc, #52]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80030a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	0c9c      	lsrs	r4, r3, #18
 80030ba:	f7fe fedd 	bl	8001e78 <HAL_PWREx_GetVoltageRange>
 80030be:	4603      	mov	r3, r0
 80030c0:	4619      	mov	r1, r3
 80030c2:	4620      	mov	r0, r4
 80030c4:	f000 f80c 	bl	80030e0 <RCC_SetFlashLatency>
 80030c8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd90      	pop	{r4, r7, pc}
 80030d2:	bf00      	nop
 80030d4:	08005e04 	.word	0x08005e04
 80030d8:	08005da4 	.word	0x08005da4
 80030dc:	431bde83 	.word	0x431bde83

080030e0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b093      	sub	sp, #76	; 0x4c
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80030ea:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <RCC_SetFlashLatency+0xf0>)
 80030ec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80030f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80030f6:	4a37      	ldr	r2, [pc, #220]	; (80031d4 <RCC_SetFlashLatency+0xf4>)
 80030f8:	f107 031c 	add.w	r3, r7, #28
 80030fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80030fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003102:	4b35      	ldr	r3, [pc, #212]	; (80031d8 <RCC_SetFlashLatency+0xf8>)
 8003104:	f107 040c 	add.w	r4, r7, #12
 8003108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800310a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800310e:	2300      	movs	r3, #0
 8003110:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003118:	d11c      	bne.n	8003154 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800311a:	2300      	movs	r3, #0
 800311c:	643b      	str	r3, [r7, #64]	; 0x40
 800311e:	e015      	b.n	800314c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003128:	4413      	add	r3, r2
 800312a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	d808      	bhi.n	8003146 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800313c:	4413      	add	r3, r2
 800313e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003142:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003144:	e022      	b.n	800318c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003148:	3301      	adds	r3, #1
 800314a:	643b      	str	r3, [r7, #64]	; 0x40
 800314c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800314e:	2b03      	cmp	r3, #3
 8003150:	d9e6      	bls.n	8003120 <RCC_SetFlashLatency+0x40>
 8003152:	e01b      	b.n	800318c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003154:	2300      	movs	r3, #0
 8003156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003158:	e015      	b.n	8003186 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800315a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003162:	4413      	add	r3, r2
 8003164:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	429a      	cmp	r2, r3
 800316c:	d808      	bhi.n	8003180 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800316e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003176:	4413      	add	r3, r2
 8003178:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800317c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800317e:	e005      	b.n	800318c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003182:	3301      	adds	r3, #1
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003188:	2b02      	cmp	r3, #2
 800318a:	d9e6      	bls.n	800315a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800318c:	4b13      	ldr	r3, [pc, #76]	; (80031dc <RCC_SetFlashLatency+0xfc>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 0207 	bic.w	r2, r3, #7
 8003194:	4911      	ldr	r1, [pc, #68]	; (80031dc <RCC_SetFlashLatency+0xfc>)
 8003196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003198:	4313      	orrs	r3, r2
 800319a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800319c:	f7fe fa6c 	bl	8001678 <HAL_GetTick>
 80031a0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80031a2:	e008      	b.n	80031b6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80031a4:	f7fe fa68 	bl	8001678 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e007      	b.n	80031c6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <RCC_SetFlashLatency+0xfc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1ef      	bne.n	80031a4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	374c      	adds	r7, #76	; 0x4c
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd90      	pop	{r4, r7, pc}
 80031ce:	bf00      	nop
 80031d0:	08005d78 	.word	0x08005d78
 80031d4:	08005d88 	.word	0x08005d88
 80031d8:	08005d94 	.word	0x08005d94
 80031dc:	58004000 	.word	0x58004000

080031e0 <LL_RCC_LSE_IsEnabled>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <LL_RCC_LSE_IsEnabled+0x18>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <LL_RCC_LSE_IsEnabled+0x1a>
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_RCC_LSE_IsReady>:
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b02      	cmp	r3, #2
 8003216:	d101      	bne.n	800321c <LL_RCC_LSE_IsReady+0x18>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <LL_RCC_LSE_IsReady+0x1a>
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <LL_RCC_MSI_EnablePLLMode>:
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800322c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	6013      	str	r3, [r2, #0]
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_RCC_SetRFWKPClockSource>:
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800324e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003256:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800325a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <LL_RCC_SetSMPSClockSource>:
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800327a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f023 0203 	bic.w	r2, r3, #3
 8003284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4313      	orrs	r3, r2
 800328c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <LL_RCC_SetSMPSPrescaler>:
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_RCC_SetUSARTClockSource>:
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80032ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f023 0203 	bic.w	r2, r3, #3
 80032d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <LL_RCC_SetLPUARTClockSource>:
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <LL_RCC_SetI2CClockSource>:
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003326:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003332:	43db      	mvns	r3, r3
 8003334:	401a      	ands	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800333e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <LL_RCC_SetLPTIMClockSource>:
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800335c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003360:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0c1b      	lsrs	r3, r3, #16
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	43db      	mvns	r3, r3
 800336c:	401a      	ands	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	041b      	lsls	r3, r3, #16
 8003372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <LL_RCC_SetSAIClockSource>:
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800339c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_RCC_SetRNGClockSource>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80033bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80033c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <LL_RCC_SetCLK48ClockSource>:
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80033e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_RCC_SetUSBClockSource>:
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff ffe3 	bl	80033e0 <LL_RCC_SetCLK48ClockSource>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <LL_RCC_SetADCClockSource>:
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800342a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003436:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <LL_RCC_SetRTCClockSource>:
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <LL_RCC_GetRTCClockSource>:
{
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800347e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800348a:	4618      	mov	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_RCC_ForceBackupDomainReset>:
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80034b6:	b480      	push	{r7}
 80034b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <LL_RCC_PLLSAI1_Enable>:
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80034dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034ea:	6013      	str	r3, [r2, #0]
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <LL_RCC_PLLSAI1_Disable>:
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80034fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003504:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003508:	6013      	str	r3, [r2, #0]
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_RCC_PLLSAI1_IsReady>:
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003526:	d101      	bne.n	800352c <LL_RCC_PLLSAI1_IsReady+0x18>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003540:	2300      	movs	r3, #0
 8003542:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003544:	2300      	movs	r3, #0
 8003546:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	d034      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800355c:	d021      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800355e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003562:	d81b      	bhi.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003564:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003568:	d01d      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800356a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800356e:	d815      	bhi.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003578:	d110      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800357a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800358a:	e00d      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f94d 	bl	8003830 <RCCEx_PLLSAI1_ConfigNP>
 8003596:	4603      	mov	r3, r0
 8003598:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800359a:	e005      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	77fb      	strb	r3, [r7, #31]
        break;
 80035a0:	e002      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80035a2:	bf00      	nop
 80035a4:	e000      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80035a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a8:	7ffb      	ldrb	r3, [r7, #31]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d105      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fee8 	bl	8003388 <LL_RCC_SetSAIClockSource>
 80035b8:	e001      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ba:	7ffb      	ldrb	r3, [r7, #31]
 80035bc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d046      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80035ca:	f7ff ff56 	bl	800347a <LL_RCC_GetRTCClockSource>
 80035ce:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d03c      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80035da:	f7fe fc3d 	bl	8001e58 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff30 	bl	800344e <LL_RCC_SetRTCClockSource>
 80035ee:	e02e      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80035f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80035fa:	f7ff ff4b 	bl	8003494 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80035fe:	f7ff ff5a 	bl	80034b6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800361a:	f7ff fde1 	bl	80031e0 <LL_RCC_LSE_IsEnabled>
 800361e:	4603      	mov	r3, r0
 8003620:	2b01      	cmp	r3, #1
 8003622:	d114      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003624:	f7fe f828 	bl	8001678 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800362a:	e00b      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362c:	f7fe f824 	bl	8001678 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4293      	cmp	r3, r2
 800363c:	d902      	bls.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	77fb      	strb	r3, [r7, #31]
              break;
 8003642:	e004      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003644:	f7ff fdde 	bl	8003204 <LL_RCC_LSE_IsReady>
 8003648:	4603      	mov	r3, r0
 800364a:	2b01      	cmp	r3, #1
 800364c:	d1ee      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800364e:	7ffb      	ldrb	r3, [r7, #31]
 8003650:	77bb      	strb	r3, [r7, #30]
 8003652:	e001      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003654:	7ffb      	ldrb	r3, [r7, #31]
 8003656:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d004      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fe2a 	bl	80032c2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d004      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fe35 	bl	80032ee <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b00      	cmp	r3, #0
 800368e:	d004      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fe5d 	bl	8003354 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fe52 	bl	8003354 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d004      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7ff fe2a 	bl	800331a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d004      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fe1f 	bl	800331a <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d022      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fe8d 	bl	800340c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036fa:	d107      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80036fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003714:	d10b      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f8e3 	bl	80038e6 <RCCEx_PLLSAI1_ConfigNQ>
 8003720:	4603      	mov	r3, r0
 8003722:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003724:	7ffb      	ldrb	r3, [r7, #31]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800372a:	7ffb      	ldrb	r3, [r7, #31]
 800372c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003736:	2b00      	cmp	r3, #0
 8003738:	d02b      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003742:	d008      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800374c:	d003      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fe2a 	bl	80033b4 <LL_RCC_SetRNGClockSource>
 8003760:	e00a      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	2000      	movs	r0, #0
 800376e:	f7ff fe21 	bl	80033b4 <LL_RCC_SetRNGClockSource>
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff fe34 	bl	80033e0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003780:	d107      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003790:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379a:	2b00      	cmp	r3, #0
 800379c:	d022      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fe3d 	bl	8003422 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b0:	d107      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ca:	d10b      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 f8e3 	bl	800399c <RCCEx_PLLSAI1_ConfigNR>
 80037d6:	4603      	mov	r3, r0
 80037d8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80037da:	7ffb      	ldrb	r3, [r7, #31]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80037e0:	7ffb      	ldrb	r3, [r7, #31]
 80037e2:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d004      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fd26 	bl	8003246 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fd45 	bl	800329a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fd2c 	bl	8003272 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800381a:	7fbb      	ldrb	r3, [r7, #30]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3720      	adds	r7, #32
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003828:	f7ff fcfe 	bl	8003228 <LL_RCC_MSI_EnablePLLMode>
}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}

08003830 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800383c:	f7ff fe5b 	bl	80034f6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003840:	f7fd ff1a 	bl	8001678 <HAL_GetTick>
 8003844:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003846:	e009      	b.n	800385c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003848:	f7fd ff16 	bl	8001678 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d902      	bls.n	800385c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	73fb      	strb	r3, [r7, #15]
      break;
 800385a:	e004      	b.n	8003866 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800385c:	f7ff fe5a 	bl	8003514 <LL_RCC_PLLSAI1_IsReady>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d137      	bne.n	80038dc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800386c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	021b      	lsls	r3, r3, #8
 800387c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003880:	4313      	orrs	r3, r2
 8003882:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003896:	4313      	orrs	r3, r2
 8003898:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800389a:	f7ff fe1d 	bl	80034d8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389e:	f7fd feeb 	bl	8001678 <HAL_GetTick>
 80038a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038a4:	e009      	b.n	80038ba <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a6:	f7fd fee7 	bl	8001678 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d902      	bls.n	80038ba <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	73fb      	strb	r3, [r7, #15]
        break;
 80038b8:	e004      	b.n	80038c4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80038ba:	f7ff fe2b 	bl	8003514 <LL_RCC_PLLSAI1_IsReady>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d1f0      	bne.n	80038a6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d108      	bne.n	80038dc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80038ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038d8:	4313      	orrs	r3, r2
 80038da:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80038f2:	f7ff fe00 	bl	80034f6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038f6:	f7fd febf 	bl	8001678 <HAL_GetTick>
 80038fa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80038fc:	e009      	b.n	8003912 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038fe:	f7fd febb 	bl	8001678 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d902      	bls.n	8003912 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	73fb      	strb	r3, [r7, #15]
      break;
 8003910:	e004      	b.n	800391c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003912:	f7ff fdff 	bl	8003514 <LL_RCC_PLLSAI1_IsReady>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f0      	bne.n	80038fe <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d137      	bne.n	8003992 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003936:	4313      	orrs	r3, r2
 8003938:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800394c:	4313      	orrs	r3, r2
 800394e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003950:	f7ff fdc2 	bl	80034d8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003954:	f7fd fe90 	bl	8001678 <HAL_GetTick>
 8003958:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800395a:	e009      	b.n	8003970 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800395c:	f7fd fe8c 	bl	8001678 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d902      	bls.n	8003970 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	73fb      	strb	r3, [r7, #15]
        break;
 800396e:	e004      	b.n	800397a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003970:	f7ff fdd0 	bl	8003514 <LL_RCC_PLLSAI1_IsReady>
 8003974:	4603      	mov	r3, r0
 8003976:	2b01      	cmp	r3, #1
 8003978:	d1f0      	bne.n	800395c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d108      	bne.n	8003992 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800398e:	4313      	orrs	r3, r2
 8003990:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003992:	7bfb      	ldrb	r3, [r7, #15]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80039a8:	f7ff fda5 	bl	80034f6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039ac:	f7fd fe64 	bl	8001678 <HAL_GetTick>
 80039b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039b2:	e009      	b.n	80039c8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039b4:	f7fd fe60 	bl	8001678 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d902      	bls.n	80039c8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	73fb      	strb	r3, [r7, #15]
      break;
 80039c6:	e004      	b.n	80039d2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80039c8:	f7ff fda4 	bl	8003514 <LL_RCC_PLLSAI1_IsReady>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d137      	bne.n	8003a48 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ec:	4313      	orrs	r3, r2
 80039ee:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80039f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a02:	4313      	orrs	r3, r2
 8003a04:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003a06:	f7ff fd67 	bl	80034d8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a0a:	f7fd fe35 	bl	8001678 <HAL_GetTick>
 8003a0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a10:	e009      	b.n	8003a26 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a12:	f7fd fe31 	bl	8001678 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d902      	bls.n	8003a26 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	73fb      	strb	r3, [r7, #15]
        break;
 8003a24:	e004      	b.n	8003a30 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003a26:	f7ff fd75 	bl	8003514 <LL_RCC_PLLSAI1_IsReady>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d1f0      	bne.n	8003a12 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d108      	bne.n	8003a48 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a44:	4313      	orrs	r3, r2
 8003a46:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e049      	b.n	8003af8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7fd fb87 	bl	800118c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4610      	mov	r0, r2
 8003a92:	f000 fa91 	bl	8003fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d001      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e036      	b.n	8003b86 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <HAL_TIM_Base_Start_IT+0x94>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x44>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b42:	d115      	bne.n	8003b70 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <HAL_TIM_Base_Start_IT+0x98>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d015      	beq.n	8003b82 <HAL_TIM_Base_Start_IT+0x82>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5c:	d011      	beq.n	8003b82 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b6e:	e008      	b.n	8003b82 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	e000      	b.n	8003b84 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40012c00 	.word	0x40012c00
 8003b98:	00010007 	.word	0x00010007

08003b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d122      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0202 	mvn.w	r2, #2
 8003bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f9cb 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003be4:	e005      	b.n	8003bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f9bd 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f9ce 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d122      	bne.n	8003c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d11b      	bne.n	8003c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0204 	mvn.w	r2, #4
 8003c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f9a1 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003c38:	e005      	b.n	8003c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f993 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f9a4 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d122      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d11b      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0208 	mvn.w	r2, #8
 8003c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2204      	movs	r2, #4
 8003c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f977 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f969 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f97a 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d122      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d11b      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0210 	mvn.w	r2, #16
 8003cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2208      	movs	r2, #8
 8003cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f94d 	bl	8003f7a <HAL_TIM_IC_CaptureCallback>
 8003ce0:	e005      	b.n	8003cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f93f 	bl	8003f66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f950 	bl	8003f8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d10e      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0201 	mvn.w	r2, #1
 8003d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fc ff72 	bl	8000c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b80      	cmp	r3, #128	; 0x80
 8003d2c:	d10e      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d38:	2b80      	cmp	r3, #128	; 0x80
 8003d3a:	d107      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 faa0 	bl	800428c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d5a:	d10e      	bne.n	8003d7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d66:	2b80      	cmp	r3, #128	; 0x80
 8003d68:	d107      	bne.n	8003d7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fa93 	bl	80042a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d10e      	bne.n	8003da6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d107      	bne.n	8003da6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f8fe 	bl	8003fa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d10e      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d107      	bne.n	8003dd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f06f 0220 	mvn.w	r2, #32
 8003dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fa53 	bl	8004278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <HAL_TIM_ConfigClockSource+0x18>
 8003dee:	2302      	movs	r3, #2
 8003df0:	e0b5      	b.n	8003f5e <HAL_TIM_ConfigClockSource+0x184>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003e10:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e14:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e1c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e2e:	d03e      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0xd4>
 8003e30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e34:	f200 8087 	bhi.w	8003f46 <HAL_TIM_ConfigClockSource+0x16c>
 8003e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3c:	f000 8085 	beq.w	8003f4a <HAL_TIM_ConfigClockSource+0x170>
 8003e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e44:	d87f      	bhi.n	8003f46 <HAL_TIM_ConfigClockSource+0x16c>
 8003e46:	2b70      	cmp	r3, #112	; 0x70
 8003e48:	d01a      	beq.n	8003e80 <HAL_TIM_ConfigClockSource+0xa6>
 8003e4a:	2b70      	cmp	r3, #112	; 0x70
 8003e4c:	d87b      	bhi.n	8003f46 <HAL_TIM_ConfigClockSource+0x16c>
 8003e4e:	2b60      	cmp	r3, #96	; 0x60
 8003e50:	d050      	beq.n	8003ef4 <HAL_TIM_ConfigClockSource+0x11a>
 8003e52:	2b60      	cmp	r3, #96	; 0x60
 8003e54:	d877      	bhi.n	8003f46 <HAL_TIM_ConfigClockSource+0x16c>
 8003e56:	2b50      	cmp	r3, #80	; 0x50
 8003e58:	d03c      	beq.n	8003ed4 <HAL_TIM_ConfigClockSource+0xfa>
 8003e5a:	2b50      	cmp	r3, #80	; 0x50
 8003e5c:	d873      	bhi.n	8003f46 <HAL_TIM_ConfigClockSource+0x16c>
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d058      	beq.n	8003f14 <HAL_TIM_ConfigClockSource+0x13a>
 8003e62:	2b40      	cmp	r3, #64	; 0x40
 8003e64:	d86f      	bhi.n	8003f46 <HAL_TIM_ConfigClockSource+0x16c>
 8003e66:	2b30      	cmp	r3, #48	; 0x30
 8003e68:	d064      	beq.n	8003f34 <HAL_TIM_ConfigClockSource+0x15a>
 8003e6a:	2b30      	cmp	r3, #48	; 0x30
 8003e6c:	d86b      	bhi.n	8003f46 <HAL_TIM_ConfigClockSource+0x16c>
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d060      	beq.n	8003f34 <HAL_TIM_ConfigClockSource+0x15a>
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d867      	bhi.n	8003f46 <HAL_TIM_ConfigClockSource+0x16c>
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d05c      	beq.n	8003f34 <HAL_TIM_ConfigClockSource+0x15a>
 8003e7a:	2b10      	cmp	r3, #16
 8003e7c:	d05a      	beq.n	8003f34 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e7e:	e062      	b.n	8003f46 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	6899      	ldr	r1, [r3, #8]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f000 f972 	bl	8004178 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ea2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	609a      	str	r2, [r3, #8]
      break;
 8003eac:	e04e      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6899      	ldr	r1, [r3, #8]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f000 f95b 	bl	8004178 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed0:	609a      	str	r2, [r3, #8]
      break;
 8003ed2:	e03b      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f000 f8cd 	bl	8004080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2150      	movs	r1, #80	; 0x50
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f926 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003ef2:	e02b      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	6859      	ldr	r1, [r3, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	461a      	mov	r2, r3
 8003f02:	f000 f8ec 	bl	80040de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2160      	movs	r1, #96	; 0x60
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f916 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003f12:	e01b      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6859      	ldr	r1, [r3, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	461a      	mov	r2, r3
 8003f22:	f000 f8ad 	bl	8004080 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2140      	movs	r1, #64	; 0x40
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 f906 	bl	800413e <TIM_ITRx_SetConfig>
      break;
 8003f32:	e00b      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f000 f8fd 	bl	800413e <TIM_ITRx_SetConfig>
        break;
 8003f44:	e002      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003f46:	bf00      	nop
 8003f48:	e000      	b.n	8003f4c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <TIM_Base_SetConfig+0xbc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_Base_SetConfig+0x20>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd6:	d108      	bne.n	8003fea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a21      	ldr	r2, [pc, #132]	; (8004074 <TIM_Base_SetConfig+0xbc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00b      	beq.n	800400a <TIM_Base_SetConfig+0x52>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff8:	d007      	beq.n	800400a <TIM_Base_SetConfig+0x52>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <TIM_Base_SetConfig+0xc0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d003      	beq.n	800400a <TIM_Base_SetConfig+0x52>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a1d      	ldr	r2, [pc, #116]	; (800407c <TIM_Base_SetConfig+0xc4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d108      	bne.n	800401c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a0c      	ldr	r2, [pc, #48]	; (8004074 <TIM_Base_SetConfig+0xbc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d007      	beq.n	8004058 <TIM_Base_SetConfig+0xa0>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <TIM_Base_SetConfig+0xc0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_Base_SetConfig+0xa0>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a0a      	ldr	r2, [pc, #40]	; (800407c <TIM_Base_SetConfig+0xc4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d103      	bne.n	8004060 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	615a      	str	r2, [r3, #20]
}
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40014400 	.word	0x40014400
 800407c:	40014800 	.word	0x40014800

08004080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f023 0201 	bic.w	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f023 030a 	bic.w	r3, r3, #10
 80040bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040de:	b480      	push	{r7}
 80040e0:	b087      	sub	sp, #28
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f023 0210 	bic.w	r2, r3, #16
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	031b      	lsls	r3, r3, #12
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800411a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	f043 0307 	orr.w	r3, r3, #7
 8004164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	609a      	str	r2, [r3, #8]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	021a      	lsls	r2, r3, #8
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	431a      	orrs	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	4313      	orrs	r3, r2
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	609a      	str	r2, [r3, #8]
}
 80041ac:	bf00      	nop
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e04a      	b.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d108      	bne.n	800420c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004200:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a12      	ldr	r2, [pc, #72]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004238:	d10c      	bne.n	8004254 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	4313      	orrs	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00

08004278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_RCC_GetUSARTClockSource>:
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80042bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4013      	ands	r3, r2
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_RCC_GetLPUARTClockSource>:
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80042dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4013      	ands	r3, r2
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e042      	b.n	800438c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800430c:	2b00      	cmp	r3, #0
 800430e:	d106      	bne.n	800431e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7fc ff53 	bl	80011c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2224      	movs	r2, #36	; 0x24
 8004322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f82c 	bl	8004394 <UART_SetConfig>
 800433c:	4603      	mov	r3, r0
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e022      	b.n	800438c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fa26 	bl	80047a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 faad 	bl	80048e4 <UART_CheckIdleState>
 800438a:	4603      	mov	r3, r0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004394:	b5b0      	push	{r4, r5, r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4ba3      	ldr	r3, [pc, #652]	; (800464c <UART_SetConfig+0x2b8>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	69f9      	ldr	r1, [r7, #28]
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a98      	ldr	r2, [pc, #608]	; (8004650 <UART_SetConfig+0x2bc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	69fa      	ldr	r2, [r7, #28]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004406:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	69f9      	ldr	r1, [r7, #28]
 8004410:	430b      	orrs	r3, r1
 8004412:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	f023 010f 	bic.w	r1, r3, #15
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a89      	ldr	r2, [pc, #548]	; (8004654 <UART_SetConfig+0x2c0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d120      	bne.n	8004476 <UART_SetConfig+0xe2>
 8004434:	2003      	movs	r0, #3
 8004436:	f7ff ff3d 	bl	80042b4 <LL_RCC_GetUSARTClockSource>
 800443a:	4603      	mov	r3, r0
 800443c:	2b03      	cmp	r3, #3
 800443e:	d817      	bhi.n	8004470 <UART_SetConfig+0xdc>
 8004440:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <UART_SetConfig+0xb4>)
 8004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004446:	bf00      	nop
 8004448:	08004459 	.word	0x08004459
 800444c:	08004465 	.word	0x08004465
 8004450:	0800445f 	.word	0x0800445f
 8004454:	0800446b 	.word	0x0800446b
 8004458:	2301      	movs	r3, #1
 800445a:	76fb      	strb	r3, [r7, #27]
 800445c:	e038      	b.n	80044d0 <UART_SetConfig+0x13c>
 800445e:	2302      	movs	r3, #2
 8004460:	76fb      	strb	r3, [r7, #27]
 8004462:	e035      	b.n	80044d0 <UART_SetConfig+0x13c>
 8004464:	2304      	movs	r3, #4
 8004466:	76fb      	strb	r3, [r7, #27]
 8004468:	e032      	b.n	80044d0 <UART_SetConfig+0x13c>
 800446a:	2308      	movs	r3, #8
 800446c:	76fb      	strb	r3, [r7, #27]
 800446e:	e02f      	b.n	80044d0 <UART_SetConfig+0x13c>
 8004470:	2310      	movs	r3, #16
 8004472:	76fb      	strb	r3, [r7, #27]
 8004474:	e02c      	b.n	80044d0 <UART_SetConfig+0x13c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a75      	ldr	r2, [pc, #468]	; (8004650 <UART_SetConfig+0x2bc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d125      	bne.n	80044cc <UART_SetConfig+0x138>
 8004480:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004484:	f7ff ff26 	bl	80042d4 <LL_RCC_GetLPUARTClockSource>
 8004488:	4603      	mov	r3, r0
 800448a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800448e:	d017      	beq.n	80044c0 <UART_SetConfig+0x12c>
 8004490:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004494:	d817      	bhi.n	80044c6 <UART_SetConfig+0x132>
 8004496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449a:	d00b      	beq.n	80044b4 <UART_SetConfig+0x120>
 800449c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a0:	d811      	bhi.n	80044c6 <UART_SetConfig+0x132>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <UART_SetConfig+0x11a>
 80044a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044aa:	d006      	beq.n	80044ba <UART_SetConfig+0x126>
 80044ac:	e00b      	b.n	80044c6 <UART_SetConfig+0x132>
 80044ae:	2300      	movs	r3, #0
 80044b0:	76fb      	strb	r3, [r7, #27]
 80044b2:	e00d      	b.n	80044d0 <UART_SetConfig+0x13c>
 80044b4:	2302      	movs	r3, #2
 80044b6:	76fb      	strb	r3, [r7, #27]
 80044b8:	e00a      	b.n	80044d0 <UART_SetConfig+0x13c>
 80044ba:	2304      	movs	r3, #4
 80044bc:	76fb      	strb	r3, [r7, #27]
 80044be:	e007      	b.n	80044d0 <UART_SetConfig+0x13c>
 80044c0:	2308      	movs	r3, #8
 80044c2:	76fb      	strb	r3, [r7, #27]
 80044c4:	e004      	b.n	80044d0 <UART_SetConfig+0x13c>
 80044c6:	2310      	movs	r3, #16
 80044c8:	76fb      	strb	r3, [r7, #27]
 80044ca:	e001      	b.n	80044d0 <UART_SetConfig+0x13c>
 80044cc:	2310      	movs	r3, #16
 80044ce:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a5e      	ldr	r2, [pc, #376]	; (8004650 <UART_SetConfig+0x2bc>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	f040 808b 	bne.w	80045f2 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044dc:	7efb      	ldrb	r3, [r7, #27]
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d823      	bhi.n	800452a <UART_SetConfig+0x196>
 80044e2:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <UART_SetConfig+0x154>)
 80044e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e8:	0800450d 	.word	0x0800450d
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	08004515 	.word	0x08004515
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800451b 	.word	0x0800451b
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	0800452b 	.word	0x0800452b
 8004504:	0800452b 	.word	0x0800452b
 8004508:	08004523 	.word	0x08004523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800450c:	f7fe fd84 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8004510:	6178      	str	r0, [r7, #20]
        break;
 8004512:	e00f      	b.n	8004534 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004514:	4b50      	ldr	r3, [pc, #320]	; (8004658 <UART_SetConfig+0x2c4>)
 8004516:	617b      	str	r3, [r7, #20]
        break;
 8004518:	e00c      	b.n	8004534 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451a:	f7fe fcfd 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 800451e:	6178      	str	r0, [r7, #20]
        break;
 8004520:	e008      	b.n	8004534 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	617b      	str	r3, [r7, #20]
        break;
 8004528:	e004      	b.n	8004534 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	76bb      	strb	r3, [r7, #26]
        break;
 8004532:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 811a 	beq.w	8004770 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	4a46      	ldr	r2, [pc, #280]	; (800465c <UART_SetConfig+0x2c8>)
 8004542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004546:	461a      	mov	r2, r3
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	fbb3 f3f2 	udiv	r3, r3, r2
 800454e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	4413      	add	r3, r2
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	429a      	cmp	r2, r3
 800455e:	d305      	bcc.n	800456c <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	d902      	bls.n	8004572 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	76bb      	strb	r3, [r7, #26]
 8004570:	e0fe      	b.n	8004770 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	4618      	mov	r0, r3
 8004576:	f04f 0100 	mov.w	r1, #0
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	4a37      	ldr	r2, [pc, #220]	; (800465c <UART_SetConfig+0x2c8>)
 8004580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004584:	b29a      	uxth	r2, r3
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	f7fb fe49 	bl	8000220 <__aeabi_uldivmod>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	020b      	lsls	r3, r1, #8
 80045a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045a4:	0202      	lsls	r2, r0, #8
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	6849      	ldr	r1, [r1, #4]
 80045aa:	0849      	lsrs	r1, r1, #1
 80045ac:	4608      	mov	r0, r1
 80045ae:	f04f 0100 	mov.w	r1, #0
 80045b2:	1814      	adds	r4, r2, r0
 80045b4:	eb43 0501 	adc.w	r5, r3, r1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	461a      	mov	r2, r3
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	4620      	mov	r0, r4
 80045c4:	4629      	mov	r1, r5
 80045c6:	f7fb fe2b 	bl	8000220 <__aeabi_uldivmod>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4613      	mov	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d8:	d308      	bcc.n	80045ec <UART_SetConfig+0x258>
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e0:	d204      	bcs.n	80045ec <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	e0c1      	b.n	8004770 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	76bb      	strb	r3, [r7, #26]
 80045f0:	e0be      	b.n	8004770 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045fa:	d16a      	bne.n	80046d2 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80045fc:	7efb      	ldrb	r3, [r7, #27]
 80045fe:	3b01      	subs	r3, #1
 8004600:	2b07      	cmp	r3, #7
 8004602:	d82d      	bhi.n	8004660 <UART_SetConfig+0x2cc>
 8004604:	a201      	add	r2, pc, #4	; (adr r2, 800460c <UART_SetConfig+0x278>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	0800462d 	.word	0x0800462d
 8004610:	08004635 	.word	0x08004635
 8004614:	08004661 	.word	0x08004661
 8004618:	0800463b 	.word	0x0800463b
 800461c:	08004661 	.word	0x08004661
 8004620:	08004661 	.word	0x08004661
 8004624:	08004661 	.word	0x08004661
 8004628:	08004643 	.word	0x08004643
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800462c:	f7fe fd0a 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8004630:	6178      	str	r0, [r7, #20]
        break;
 8004632:	e01a      	b.n	800466a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004634:	4b08      	ldr	r3, [pc, #32]	; (8004658 <UART_SetConfig+0x2c4>)
 8004636:	617b      	str	r3, [r7, #20]
        break;
 8004638:	e017      	b.n	800466a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463a:	f7fe fc6d 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 800463e:	6178      	str	r0, [r7, #20]
        break;
 8004640:	e013      	b.n	800466a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004646:	617b      	str	r3, [r7, #20]
        break;
 8004648:	e00f      	b.n	800466a <UART_SetConfig+0x2d6>
 800464a:	bf00      	nop
 800464c:	cfff69f3 	.word	0xcfff69f3
 8004650:	40008000 	.word	0x40008000
 8004654:	40013800 	.word	0x40013800
 8004658:	00f42400 	.word	0x00f42400
 800465c:	08005e44 	.word	0x08005e44
      default:
        pclk = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	76bb      	strb	r3, [r7, #26]
        break;
 8004668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d07f      	beq.n	8004770 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	4a48      	ldr	r2, [pc, #288]	; (8004798 <UART_SetConfig+0x404>)
 8004676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800467a:	461a      	mov	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004682:	005a      	lsls	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	441a      	add	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	b29b      	uxth	r3, r3
 8004696:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b0f      	cmp	r3, #15
 800469c:	d916      	bls.n	80046cc <UART_SetConfig+0x338>
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a4:	d212      	bcs.n	80046cc <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	f023 030f 	bic.w	r3, r3, #15
 80046ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	89fb      	ldrh	r3, [r7, #14]
 80046be:	4313      	orrs	r3, r2
 80046c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	89fa      	ldrh	r2, [r7, #14]
 80046c8:	60da      	str	r2, [r3, #12]
 80046ca:	e051      	b.n	8004770 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	76bb      	strb	r3, [r7, #26]
 80046d0:	e04e      	b.n	8004770 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046d2:	7efb      	ldrb	r3, [r7, #27]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	2b07      	cmp	r3, #7
 80046d8:	d821      	bhi.n	800471e <UART_SetConfig+0x38a>
 80046da:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <UART_SetConfig+0x34c>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	08004701 	.word	0x08004701
 80046e4:	08004709 	.word	0x08004709
 80046e8:	0800471f 	.word	0x0800471f
 80046ec:	0800470f 	.word	0x0800470f
 80046f0:	0800471f 	.word	0x0800471f
 80046f4:	0800471f 	.word	0x0800471f
 80046f8:	0800471f 	.word	0x0800471f
 80046fc:	08004717 	.word	0x08004717
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004700:	f7fe fca0 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8004704:	6178      	str	r0, [r7, #20]
        break;
 8004706:	e00f      	b.n	8004728 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004708:	4b24      	ldr	r3, [pc, #144]	; (800479c <UART_SetConfig+0x408>)
 800470a:	617b      	str	r3, [r7, #20]
        break;
 800470c:	e00c      	b.n	8004728 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800470e:	f7fe fc03 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8004712:	6178      	str	r0, [r7, #20]
        break;
 8004714:	e008      	b.n	8004728 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800471a:	617b      	str	r3, [r7, #20]
        break;
 800471c:	e004      	b.n	8004728 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	76bb      	strb	r3, [r7, #26]
        break;
 8004726:	bf00      	nop
    }

    if (pclk != 0U)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d020      	beq.n	8004770 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	4a19      	ldr	r2, [pc, #100]	; (8004798 <UART_SetConfig+0x404>)
 8004734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004738:	461a      	mov	r2, r3
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	441a      	add	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	b29b      	uxth	r3, r3
 8004752:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b0f      	cmp	r3, #15
 8004758:	d908      	bls.n	800476c <UART_SetConfig+0x3d8>
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004760:	d204      	bcs.n	800476c <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	e001      	b.n	8004770 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800478c:	7ebb      	ldrb	r3, [r7, #26]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bdb0      	pop	{r4, r5, r7, pc}
 8004796:	bf00      	nop
 8004798:	08005e44 	.word	0x08005e44
 800479c:	00f42400 	.word	0x00f42400

080047a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01a      	beq.n	80048b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800489e:	d10a      	bne.n	80048b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  }
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048f4:	f7fc fec0 	bl	8001678 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b08      	cmp	r3, #8
 8004906:	d10e      	bne.n	8004926 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004908:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f82f 	bl	800497a <UART_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e025      	b.n	8004972 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b04      	cmp	r3, #4
 8004932:	d10e      	bne.n	8004952 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f819 	bl	800497a <UART_WaitOnFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e00f      	b.n	8004972 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4613      	mov	r3, r2
 8004988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498a:	e062      	b.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	d05e      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004994:	f7fc fe70 	bl	8001678 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d302      	bcc.n	80049aa <UART_WaitOnFlagUntilTimeout+0x30>
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d11d      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e045      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02e      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a02:	d126      	bne.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a1c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e00f      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d08d      	beq.n	800498c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_UARTEx_DisableFifoMode+0x16>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e027      	b.n	8004ae0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2224      	movs	r2, #36	; 0x24
 8004a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0201 	bic.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004abe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e02d      	b.n	8004b60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2224      	movs	r2, #36	; 0x24
 8004b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0201 	bic.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f84f 	bl	8004be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e02d      	b.n	8004bdc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2224      	movs	r2, #36	; 0x24
 8004b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f811 	bl	8004be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d108      	bne.n	8004c06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c04:	e031      	b.n	8004c6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c06:	2308      	movs	r3, #8
 8004c08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	0e5b      	lsrs	r3, r3, #25
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	0f5b      	lsrs	r3, r3, #29
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c2e:	7bbb      	ldrb	r3, [r7, #14]
 8004c30:	7b3a      	ldrb	r2, [r7, #12]
 8004c32:	4911      	ldr	r1, [pc, #68]	; (8004c78 <UARTEx_SetNbDataToProcess+0x94>)
 8004c34:	5c8a      	ldrb	r2, [r1, r2]
 8004c36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c3a:	7b3a      	ldrb	r2, [r7, #12]
 8004c3c:	490f      	ldr	r1, [pc, #60]	; (8004c7c <UARTEx_SetNbDataToProcess+0x98>)
 8004c3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c40:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	7b7a      	ldrb	r2, [r7, #13]
 8004c50:	4909      	ldr	r1, [pc, #36]	; (8004c78 <UARTEx_SetNbDataToProcess+0x94>)
 8004c52:	5c8a      	ldrb	r2, [r1, r2]
 8004c54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c58:	7b7a      	ldrb	r2, [r7, #13]
 8004c5a:	4908      	ldr	r1, [pc, #32]	; (8004c7c <UARTEx_SetNbDataToProcess+0x98>)
 8004c5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	08005e5c 	.word	0x08005e5c
 8004c7c:	08005e64 	.word	0x08005e64

08004c80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c88:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004c8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	f107 0014 	add.w	r0, r7, #20
 8004cc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	b004      	add	sp, #16
 8004cf6:	4770      	bx	lr

08004cf8 <__errno>:
 8004cf8:	4b01      	ldr	r3, [pc, #4]	; (8004d00 <__errno+0x8>)
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000024 	.word	0x20000024

08004d04 <__libc_init_array>:
 8004d04:	b570      	push	{r4, r5, r6, lr}
 8004d06:	4d0d      	ldr	r5, [pc, #52]	; (8004d3c <__libc_init_array+0x38>)
 8004d08:	4c0d      	ldr	r4, [pc, #52]	; (8004d40 <__libc_init_array+0x3c>)
 8004d0a:	1b64      	subs	r4, r4, r5
 8004d0c:	10a4      	asrs	r4, r4, #2
 8004d0e:	2600      	movs	r6, #0
 8004d10:	42a6      	cmp	r6, r4
 8004d12:	d109      	bne.n	8004d28 <__libc_init_array+0x24>
 8004d14:	4d0b      	ldr	r5, [pc, #44]	; (8004d44 <__libc_init_array+0x40>)
 8004d16:	4c0c      	ldr	r4, [pc, #48]	; (8004d48 <__libc_init_array+0x44>)
 8004d18:	f001 f822 	bl	8005d60 <_init>
 8004d1c:	1b64      	subs	r4, r4, r5
 8004d1e:	10a4      	asrs	r4, r4, #2
 8004d20:	2600      	movs	r6, #0
 8004d22:	42a6      	cmp	r6, r4
 8004d24:	d105      	bne.n	8004d32 <__libc_init_array+0x2e>
 8004d26:	bd70      	pop	{r4, r5, r6, pc}
 8004d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2c:	4798      	blx	r3
 8004d2e:	3601      	adds	r6, #1
 8004d30:	e7ee      	b.n	8004d10 <__libc_init_array+0xc>
 8004d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d36:	4798      	blx	r3
 8004d38:	3601      	adds	r6, #1
 8004d3a:	e7f2      	b.n	8004d22 <__libc_init_array+0x1e>
 8004d3c:	08005fc0 	.word	0x08005fc0
 8004d40:	08005fc0 	.word	0x08005fc0
 8004d44:	08005fc0 	.word	0x08005fc0
 8004d48:	08005fc4 	.word	0x08005fc4

08004d4c <memset>:
 8004d4c:	4402      	add	r2, r0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d100      	bne.n	8004d56 <memset+0xa>
 8004d54:	4770      	bx	lr
 8004d56:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5a:	e7f9      	b.n	8004d50 <memset+0x4>

08004d5c <rand>:
 8004d5c:	4b17      	ldr	r3, [pc, #92]	; (8004dbc <rand+0x60>)
 8004d5e:	b510      	push	{r4, lr}
 8004d60:	681c      	ldr	r4, [r3, #0]
 8004d62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d64:	b9b3      	cbnz	r3, 8004d94 <rand+0x38>
 8004d66:	2018      	movs	r0, #24
 8004d68:	f000 f868 	bl	8004e3c <malloc>
 8004d6c:	63a0      	str	r0, [r4, #56]	; 0x38
 8004d6e:	b928      	cbnz	r0, 8004d7c <rand+0x20>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <rand+0x64>)
 8004d74:	4813      	ldr	r0, [pc, #76]	; (8004dc4 <rand+0x68>)
 8004d76:	214e      	movs	r1, #78	; 0x4e
 8004d78:	f000 f830 	bl	8004ddc <__assert_func>
 8004d7c:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <rand+0x6c>)
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <rand+0x70>)
 8004d80:	e9c0 2300 	strd	r2, r3, [r0]
 8004d84:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <rand+0x74>)
 8004d86:	6083      	str	r3, [r0, #8]
 8004d88:	230b      	movs	r3, #11
 8004d8a:	8183      	strh	r3, [r0, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004d94:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d96:	480f      	ldr	r0, [pc, #60]	; (8004dd4 <rand+0x78>)
 8004d98:	690a      	ldr	r2, [r1, #16]
 8004d9a:	694b      	ldr	r3, [r1, #20]
 8004d9c:	4c0e      	ldr	r4, [pc, #56]	; (8004dd8 <rand+0x7c>)
 8004d9e:	4350      	muls	r0, r2
 8004da0:	fb04 0003 	mla	r0, r4, r3, r0
 8004da4:	fba2 3404 	umull	r3, r4, r2, r4
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	4404      	add	r4, r0
 8004dac:	f144 0000 	adc.w	r0, r4, #0
 8004db0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8004db4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004db8:	bd10      	pop	{r4, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000024 	.word	0x20000024
 8004dc0:	08005e70 	.word	0x08005e70
 8004dc4:	08005e87 	.word	0x08005e87
 8004dc8:	abcd330e 	.word	0xabcd330e
 8004dcc:	e66d1234 	.word	0xe66d1234
 8004dd0:	0005deec 	.word	0x0005deec
 8004dd4:	5851f42d 	.word	0x5851f42d
 8004dd8:	4c957f2d 	.word	0x4c957f2d

08004ddc <__assert_func>:
 8004ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004dde:	4614      	mov	r4, r2
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <__assert_func+0x2c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4605      	mov	r5, r0
 8004de8:	68d8      	ldr	r0, [r3, #12]
 8004dea:	b14c      	cbz	r4, 8004e00 <__assert_func+0x24>
 8004dec:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <__assert_func+0x30>)
 8004dee:	9100      	str	r1, [sp, #0]
 8004df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004df4:	4906      	ldr	r1, [pc, #24]	; (8004e10 <__assert_func+0x34>)
 8004df6:	462b      	mov	r3, r5
 8004df8:	f000 f80e 	bl	8004e18 <fiprintf>
 8004dfc:	f000 fc8e 	bl	800571c <abort>
 8004e00:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <__assert_func+0x38>)
 8004e02:	461c      	mov	r4, r3
 8004e04:	e7f3      	b.n	8004dee <__assert_func+0x12>
 8004e06:	bf00      	nop
 8004e08:	20000024 	.word	0x20000024
 8004e0c:	08005ee6 	.word	0x08005ee6
 8004e10:	08005ef3 	.word	0x08005ef3
 8004e14:	08005f21 	.word	0x08005f21

08004e18 <fiprintf>:
 8004e18:	b40e      	push	{r1, r2, r3}
 8004e1a:	b503      	push	{r0, r1, lr}
 8004e1c:	4601      	mov	r1, r0
 8004e1e:	ab03      	add	r3, sp, #12
 8004e20:	4805      	ldr	r0, [pc, #20]	; (8004e38 <fiprintf+0x20>)
 8004e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e26:	6800      	ldr	r0, [r0, #0]
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	f000 f8e3 	bl	8004ff4 <_vfiprintf_r>
 8004e2e:	b002      	add	sp, #8
 8004e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e34:	b003      	add	sp, #12
 8004e36:	4770      	bx	lr
 8004e38:	20000024 	.word	0x20000024

08004e3c <malloc>:
 8004e3c:	4b02      	ldr	r3, [pc, #8]	; (8004e48 <malloc+0xc>)
 8004e3e:	4601      	mov	r1, r0
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	f000 b853 	b.w	8004eec <_malloc_r>
 8004e46:	bf00      	nop
 8004e48:	20000024 	.word	0x20000024

08004e4c <_free_r>:
 8004e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e4e:	2900      	cmp	r1, #0
 8004e50:	d048      	beq.n	8004ee4 <_free_r+0x98>
 8004e52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e56:	9001      	str	r0, [sp, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f1a1 0404 	sub.w	r4, r1, #4
 8004e5e:	bfb8      	it	lt
 8004e60:	18e4      	addlt	r4, r4, r3
 8004e62:	f000 fe81 	bl	8005b68 <__malloc_lock>
 8004e66:	4a20      	ldr	r2, [pc, #128]	; (8004ee8 <_free_r+0x9c>)
 8004e68:	9801      	ldr	r0, [sp, #4]
 8004e6a:	6813      	ldr	r3, [r2, #0]
 8004e6c:	4615      	mov	r5, r2
 8004e6e:	b933      	cbnz	r3, 8004e7e <_free_r+0x32>
 8004e70:	6063      	str	r3, [r4, #4]
 8004e72:	6014      	str	r4, [r2, #0]
 8004e74:	b003      	add	sp, #12
 8004e76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e7a:	f000 be7b 	b.w	8005b74 <__malloc_unlock>
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	d90b      	bls.n	8004e9a <_free_r+0x4e>
 8004e82:	6821      	ldr	r1, [r4, #0]
 8004e84:	1862      	adds	r2, r4, r1
 8004e86:	4293      	cmp	r3, r2
 8004e88:	bf04      	itt	eq
 8004e8a:	681a      	ldreq	r2, [r3, #0]
 8004e8c:	685b      	ldreq	r3, [r3, #4]
 8004e8e:	6063      	str	r3, [r4, #4]
 8004e90:	bf04      	itt	eq
 8004e92:	1852      	addeq	r2, r2, r1
 8004e94:	6022      	streq	r2, [r4, #0]
 8004e96:	602c      	str	r4, [r5, #0]
 8004e98:	e7ec      	b.n	8004e74 <_free_r+0x28>
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	b10b      	cbz	r3, 8004ea4 <_free_r+0x58>
 8004ea0:	42a3      	cmp	r3, r4
 8004ea2:	d9fa      	bls.n	8004e9a <_free_r+0x4e>
 8004ea4:	6811      	ldr	r1, [r2, #0]
 8004ea6:	1855      	adds	r5, r2, r1
 8004ea8:	42a5      	cmp	r5, r4
 8004eaa:	d10b      	bne.n	8004ec4 <_free_r+0x78>
 8004eac:	6824      	ldr	r4, [r4, #0]
 8004eae:	4421      	add	r1, r4
 8004eb0:	1854      	adds	r4, r2, r1
 8004eb2:	42a3      	cmp	r3, r4
 8004eb4:	6011      	str	r1, [r2, #0]
 8004eb6:	d1dd      	bne.n	8004e74 <_free_r+0x28>
 8004eb8:	681c      	ldr	r4, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	6053      	str	r3, [r2, #4]
 8004ebe:	4421      	add	r1, r4
 8004ec0:	6011      	str	r1, [r2, #0]
 8004ec2:	e7d7      	b.n	8004e74 <_free_r+0x28>
 8004ec4:	d902      	bls.n	8004ecc <_free_r+0x80>
 8004ec6:	230c      	movs	r3, #12
 8004ec8:	6003      	str	r3, [r0, #0]
 8004eca:	e7d3      	b.n	8004e74 <_free_r+0x28>
 8004ecc:	6825      	ldr	r5, [r4, #0]
 8004ece:	1961      	adds	r1, r4, r5
 8004ed0:	428b      	cmp	r3, r1
 8004ed2:	bf04      	itt	eq
 8004ed4:	6819      	ldreq	r1, [r3, #0]
 8004ed6:	685b      	ldreq	r3, [r3, #4]
 8004ed8:	6063      	str	r3, [r4, #4]
 8004eda:	bf04      	itt	eq
 8004edc:	1949      	addeq	r1, r1, r5
 8004ede:	6021      	streq	r1, [r4, #0]
 8004ee0:	6054      	str	r4, [r2, #4]
 8004ee2:	e7c7      	b.n	8004e74 <_free_r+0x28>
 8004ee4:	b003      	add	sp, #12
 8004ee6:	bd30      	pop	{r4, r5, pc}
 8004ee8:	200000cc 	.word	0x200000cc

08004eec <_malloc_r>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	1ccd      	adds	r5, r1, #3
 8004ef0:	f025 0503 	bic.w	r5, r5, #3
 8004ef4:	3508      	adds	r5, #8
 8004ef6:	2d0c      	cmp	r5, #12
 8004ef8:	bf38      	it	cc
 8004efa:	250c      	movcc	r5, #12
 8004efc:	2d00      	cmp	r5, #0
 8004efe:	4606      	mov	r6, r0
 8004f00:	db01      	blt.n	8004f06 <_malloc_r+0x1a>
 8004f02:	42a9      	cmp	r1, r5
 8004f04:	d903      	bls.n	8004f0e <_malloc_r+0x22>
 8004f06:	230c      	movs	r3, #12
 8004f08:	6033      	str	r3, [r6, #0]
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f0e:	f000 fe2b 	bl	8005b68 <__malloc_lock>
 8004f12:	4921      	ldr	r1, [pc, #132]	; (8004f98 <_malloc_r+0xac>)
 8004f14:	680a      	ldr	r2, [r1, #0]
 8004f16:	4614      	mov	r4, r2
 8004f18:	b99c      	cbnz	r4, 8004f42 <_malloc_r+0x56>
 8004f1a:	4f20      	ldr	r7, [pc, #128]	; (8004f9c <_malloc_r+0xb0>)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	b923      	cbnz	r3, 8004f2a <_malloc_r+0x3e>
 8004f20:	4621      	mov	r1, r4
 8004f22:	4630      	mov	r0, r6
 8004f24:	f000 fb2a 	bl	800557c <_sbrk_r>
 8004f28:	6038      	str	r0, [r7, #0]
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	f000 fb25 	bl	800557c <_sbrk_r>
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	d123      	bne.n	8004f7e <_malloc_r+0x92>
 8004f36:	230c      	movs	r3, #12
 8004f38:	6033      	str	r3, [r6, #0]
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	f000 fe1a 	bl	8005b74 <__malloc_unlock>
 8004f40:	e7e3      	b.n	8004f0a <_malloc_r+0x1e>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	1b5b      	subs	r3, r3, r5
 8004f46:	d417      	bmi.n	8004f78 <_malloc_r+0x8c>
 8004f48:	2b0b      	cmp	r3, #11
 8004f4a:	d903      	bls.n	8004f54 <_malloc_r+0x68>
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	441c      	add	r4, r3
 8004f50:	6025      	str	r5, [r4, #0]
 8004f52:	e004      	b.n	8004f5e <_malloc_r+0x72>
 8004f54:	6863      	ldr	r3, [r4, #4]
 8004f56:	42a2      	cmp	r2, r4
 8004f58:	bf0c      	ite	eq
 8004f5a:	600b      	streq	r3, [r1, #0]
 8004f5c:	6053      	strne	r3, [r2, #4]
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f000 fe08 	bl	8005b74 <__malloc_unlock>
 8004f64:	f104 000b 	add.w	r0, r4, #11
 8004f68:	1d23      	adds	r3, r4, #4
 8004f6a:	f020 0007 	bic.w	r0, r0, #7
 8004f6e:	1ac2      	subs	r2, r0, r3
 8004f70:	d0cc      	beq.n	8004f0c <_malloc_r+0x20>
 8004f72:	1a1b      	subs	r3, r3, r0
 8004f74:	50a3      	str	r3, [r4, r2]
 8004f76:	e7c9      	b.n	8004f0c <_malloc_r+0x20>
 8004f78:	4622      	mov	r2, r4
 8004f7a:	6864      	ldr	r4, [r4, #4]
 8004f7c:	e7cc      	b.n	8004f18 <_malloc_r+0x2c>
 8004f7e:	1cc4      	adds	r4, r0, #3
 8004f80:	f024 0403 	bic.w	r4, r4, #3
 8004f84:	42a0      	cmp	r0, r4
 8004f86:	d0e3      	beq.n	8004f50 <_malloc_r+0x64>
 8004f88:	1a21      	subs	r1, r4, r0
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	f000 faf6 	bl	800557c <_sbrk_r>
 8004f90:	3001      	adds	r0, #1
 8004f92:	d1dd      	bne.n	8004f50 <_malloc_r+0x64>
 8004f94:	e7cf      	b.n	8004f36 <_malloc_r+0x4a>
 8004f96:	bf00      	nop
 8004f98:	200000cc 	.word	0x200000cc
 8004f9c:	200000d0 	.word	0x200000d0

08004fa0 <__sfputc_r>:
 8004fa0:	6893      	ldr	r3, [r2, #8]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	b410      	push	{r4}
 8004fa8:	6093      	str	r3, [r2, #8]
 8004faa:	da08      	bge.n	8004fbe <__sfputc_r+0x1e>
 8004fac:	6994      	ldr	r4, [r2, #24]
 8004fae:	42a3      	cmp	r3, r4
 8004fb0:	db01      	blt.n	8004fb6 <__sfputc_r+0x16>
 8004fb2:	290a      	cmp	r1, #10
 8004fb4:	d103      	bne.n	8004fbe <__sfputc_r+0x1e>
 8004fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fba:	f000 baef 	b.w	800559c <__swbuf_r>
 8004fbe:	6813      	ldr	r3, [r2, #0]
 8004fc0:	1c58      	adds	r0, r3, #1
 8004fc2:	6010      	str	r0, [r2, #0]
 8004fc4:	7019      	strb	r1, [r3, #0]
 8004fc6:	4608      	mov	r0, r1
 8004fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <__sfputs_r>:
 8004fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd0:	4606      	mov	r6, r0
 8004fd2:	460f      	mov	r7, r1
 8004fd4:	4614      	mov	r4, r2
 8004fd6:	18d5      	adds	r5, r2, r3
 8004fd8:	42ac      	cmp	r4, r5
 8004fda:	d101      	bne.n	8004fe0 <__sfputs_r+0x12>
 8004fdc:	2000      	movs	r0, #0
 8004fde:	e007      	b.n	8004ff0 <__sfputs_r+0x22>
 8004fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fe4:	463a      	mov	r2, r7
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f7ff ffda 	bl	8004fa0 <__sfputc_r>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d1f3      	bne.n	8004fd8 <__sfputs_r+0xa>
 8004ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ff4 <_vfiprintf_r>:
 8004ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff8:	460d      	mov	r5, r1
 8004ffa:	b09d      	sub	sp, #116	; 0x74
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	4698      	mov	r8, r3
 8005000:	4606      	mov	r6, r0
 8005002:	b118      	cbz	r0, 800500c <_vfiprintf_r+0x18>
 8005004:	6983      	ldr	r3, [r0, #24]
 8005006:	b90b      	cbnz	r3, 800500c <_vfiprintf_r+0x18>
 8005008:	f000 fcaa 	bl	8005960 <__sinit>
 800500c:	4b89      	ldr	r3, [pc, #548]	; (8005234 <_vfiprintf_r+0x240>)
 800500e:	429d      	cmp	r5, r3
 8005010:	d11b      	bne.n	800504a <_vfiprintf_r+0x56>
 8005012:	6875      	ldr	r5, [r6, #4]
 8005014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005016:	07d9      	lsls	r1, r3, #31
 8005018:	d405      	bmi.n	8005026 <_vfiprintf_r+0x32>
 800501a:	89ab      	ldrh	r3, [r5, #12]
 800501c:	059a      	lsls	r2, r3, #22
 800501e:	d402      	bmi.n	8005026 <_vfiprintf_r+0x32>
 8005020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005022:	f000 fd3b 	bl	8005a9c <__retarget_lock_acquire_recursive>
 8005026:	89ab      	ldrh	r3, [r5, #12]
 8005028:	071b      	lsls	r3, r3, #28
 800502a:	d501      	bpl.n	8005030 <_vfiprintf_r+0x3c>
 800502c:	692b      	ldr	r3, [r5, #16]
 800502e:	b9eb      	cbnz	r3, 800506c <_vfiprintf_r+0x78>
 8005030:	4629      	mov	r1, r5
 8005032:	4630      	mov	r0, r6
 8005034:	f000 fb04 	bl	8005640 <__swsetup_r>
 8005038:	b1c0      	cbz	r0, 800506c <_vfiprintf_r+0x78>
 800503a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800503c:	07dc      	lsls	r4, r3, #31
 800503e:	d50e      	bpl.n	800505e <_vfiprintf_r+0x6a>
 8005040:	f04f 30ff 	mov.w	r0, #4294967295
 8005044:	b01d      	add	sp, #116	; 0x74
 8005046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504a:	4b7b      	ldr	r3, [pc, #492]	; (8005238 <_vfiprintf_r+0x244>)
 800504c:	429d      	cmp	r5, r3
 800504e:	d101      	bne.n	8005054 <_vfiprintf_r+0x60>
 8005050:	68b5      	ldr	r5, [r6, #8]
 8005052:	e7df      	b.n	8005014 <_vfiprintf_r+0x20>
 8005054:	4b79      	ldr	r3, [pc, #484]	; (800523c <_vfiprintf_r+0x248>)
 8005056:	429d      	cmp	r5, r3
 8005058:	bf08      	it	eq
 800505a:	68f5      	ldreq	r5, [r6, #12]
 800505c:	e7da      	b.n	8005014 <_vfiprintf_r+0x20>
 800505e:	89ab      	ldrh	r3, [r5, #12]
 8005060:	0598      	lsls	r0, r3, #22
 8005062:	d4ed      	bmi.n	8005040 <_vfiprintf_r+0x4c>
 8005064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005066:	f000 fd1a 	bl	8005a9e <__retarget_lock_release_recursive>
 800506a:	e7e9      	b.n	8005040 <_vfiprintf_r+0x4c>
 800506c:	2300      	movs	r3, #0
 800506e:	9309      	str	r3, [sp, #36]	; 0x24
 8005070:	2320      	movs	r3, #32
 8005072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005076:	f8cd 800c 	str.w	r8, [sp, #12]
 800507a:	2330      	movs	r3, #48	; 0x30
 800507c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005240 <_vfiprintf_r+0x24c>
 8005080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005084:	f04f 0901 	mov.w	r9, #1
 8005088:	4623      	mov	r3, r4
 800508a:	469a      	mov	sl, r3
 800508c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005090:	b10a      	cbz	r2, 8005096 <_vfiprintf_r+0xa2>
 8005092:	2a25      	cmp	r2, #37	; 0x25
 8005094:	d1f9      	bne.n	800508a <_vfiprintf_r+0x96>
 8005096:	ebba 0b04 	subs.w	fp, sl, r4
 800509a:	d00b      	beq.n	80050b4 <_vfiprintf_r+0xc0>
 800509c:	465b      	mov	r3, fp
 800509e:	4622      	mov	r2, r4
 80050a0:	4629      	mov	r1, r5
 80050a2:	4630      	mov	r0, r6
 80050a4:	f7ff ff93 	bl	8004fce <__sfputs_r>
 80050a8:	3001      	adds	r0, #1
 80050aa:	f000 80aa 	beq.w	8005202 <_vfiprintf_r+0x20e>
 80050ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050b0:	445a      	add	r2, fp
 80050b2:	9209      	str	r2, [sp, #36]	; 0x24
 80050b4:	f89a 3000 	ldrb.w	r3, [sl]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 80a2 	beq.w	8005202 <_vfiprintf_r+0x20e>
 80050be:	2300      	movs	r3, #0
 80050c0:	f04f 32ff 	mov.w	r2, #4294967295
 80050c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050c8:	f10a 0a01 	add.w	sl, sl, #1
 80050cc:	9304      	str	r3, [sp, #16]
 80050ce:	9307      	str	r3, [sp, #28]
 80050d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050d4:	931a      	str	r3, [sp, #104]	; 0x68
 80050d6:	4654      	mov	r4, sl
 80050d8:	2205      	movs	r2, #5
 80050da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050de:	4858      	ldr	r0, [pc, #352]	; (8005240 <_vfiprintf_r+0x24c>)
 80050e0:	f7fb f84e 	bl	8000180 <memchr>
 80050e4:	9a04      	ldr	r2, [sp, #16]
 80050e6:	b9d8      	cbnz	r0, 8005120 <_vfiprintf_r+0x12c>
 80050e8:	06d1      	lsls	r1, r2, #27
 80050ea:	bf44      	itt	mi
 80050ec:	2320      	movmi	r3, #32
 80050ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050f2:	0713      	lsls	r3, r2, #28
 80050f4:	bf44      	itt	mi
 80050f6:	232b      	movmi	r3, #43	; 0x2b
 80050f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005100:	2b2a      	cmp	r3, #42	; 0x2a
 8005102:	d015      	beq.n	8005130 <_vfiprintf_r+0x13c>
 8005104:	9a07      	ldr	r2, [sp, #28]
 8005106:	4654      	mov	r4, sl
 8005108:	2000      	movs	r0, #0
 800510a:	f04f 0c0a 	mov.w	ip, #10
 800510e:	4621      	mov	r1, r4
 8005110:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005114:	3b30      	subs	r3, #48	; 0x30
 8005116:	2b09      	cmp	r3, #9
 8005118:	d94e      	bls.n	80051b8 <_vfiprintf_r+0x1c4>
 800511a:	b1b0      	cbz	r0, 800514a <_vfiprintf_r+0x156>
 800511c:	9207      	str	r2, [sp, #28]
 800511e:	e014      	b.n	800514a <_vfiprintf_r+0x156>
 8005120:	eba0 0308 	sub.w	r3, r0, r8
 8005124:	fa09 f303 	lsl.w	r3, r9, r3
 8005128:	4313      	orrs	r3, r2
 800512a:	9304      	str	r3, [sp, #16]
 800512c:	46a2      	mov	sl, r4
 800512e:	e7d2      	b.n	80050d6 <_vfiprintf_r+0xe2>
 8005130:	9b03      	ldr	r3, [sp, #12]
 8005132:	1d19      	adds	r1, r3, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	9103      	str	r1, [sp, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	bfbb      	ittet	lt
 800513c:	425b      	neglt	r3, r3
 800513e:	f042 0202 	orrlt.w	r2, r2, #2
 8005142:	9307      	strge	r3, [sp, #28]
 8005144:	9307      	strlt	r3, [sp, #28]
 8005146:	bfb8      	it	lt
 8005148:	9204      	strlt	r2, [sp, #16]
 800514a:	7823      	ldrb	r3, [r4, #0]
 800514c:	2b2e      	cmp	r3, #46	; 0x2e
 800514e:	d10c      	bne.n	800516a <_vfiprintf_r+0x176>
 8005150:	7863      	ldrb	r3, [r4, #1]
 8005152:	2b2a      	cmp	r3, #42	; 0x2a
 8005154:	d135      	bne.n	80051c2 <_vfiprintf_r+0x1ce>
 8005156:	9b03      	ldr	r3, [sp, #12]
 8005158:	1d1a      	adds	r2, r3, #4
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	9203      	str	r2, [sp, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	bfb8      	it	lt
 8005162:	f04f 33ff 	movlt.w	r3, #4294967295
 8005166:	3402      	adds	r4, #2
 8005168:	9305      	str	r3, [sp, #20]
 800516a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005250 <_vfiprintf_r+0x25c>
 800516e:	7821      	ldrb	r1, [r4, #0]
 8005170:	2203      	movs	r2, #3
 8005172:	4650      	mov	r0, sl
 8005174:	f7fb f804 	bl	8000180 <memchr>
 8005178:	b140      	cbz	r0, 800518c <_vfiprintf_r+0x198>
 800517a:	2340      	movs	r3, #64	; 0x40
 800517c:	eba0 000a 	sub.w	r0, r0, sl
 8005180:	fa03 f000 	lsl.w	r0, r3, r0
 8005184:	9b04      	ldr	r3, [sp, #16]
 8005186:	4303      	orrs	r3, r0
 8005188:	3401      	adds	r4, #1
 800518a:	9304      	str	r3, [sp, #16]
 800518c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005190:	482c      	ldr	r0, [pc, #176]	; (8005244 <_vfiprintf_r+0x250>)
 8005192:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005196:	2206      	movs	r2, #6
 8005198:	f7fa fff2 	bl	8000180 <memchr>
 800519c:	2800      	cmp	r0, #0
 800519e:	d03f      	beq.n	8005220 <_vfiprintf_r+0x22c>
 80051a0:	4b29      	ldr	r3, [pc, #164]	; (8005248 <_vfiprintf_r+0x254>)
 80051a2:	bb1b      	cbnz	r3, 80051ec <_vfiprintf_r+0x1f8>
 80051a4:	9b03      	ldr	r3, [sp, #12]
 80051a6:	3307      	adds	r3, #7
 80051a8:	f023 0307 	bic.w	r3, r3, #7
 80051ac:	3308      	adds	r3, #8
 80051ae:	9303      	str	r3, [sp, #12]
 80051b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b2:	443b      	add	r3, r7
 80051b4:	9309      	str	r3, [sp, #36]	; 0x24
 80051b6:	e767      	b.n	8005088 <_vfiprintf_r+0x94>
 80051b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80051bc:	460c      	mov	r4, r1
 80051be:	2001      	movs	r0, #1
 80051c0:	e7a5      	b.n	800510e <_vfiprintf_r+0x11a>
 80051c2:	2300      	movs	r3, #0
 80051c4:	3401      	adds	r4, #1
 80051c6:	9305      	str	r3, [sp, #20]
 80051c8:	4619      	mov	r1, r3
 80051ca:	f04f 0c0a 	mov.w	ip, #10
 80051ce:	4620      	mov	r0, r4
 80051d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051d4:	3a30      	subs	r2, #48	; 0x30
 80051d6:	2a09      	cmp	r2, #9
 80051d8:	d903      	bls.n	80051e2 <_vfiprintf_r+0x1ee>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0c5      	beq.n	800516a <_vfiprintf_r+0x176>
 80051de:	9105      	str	r1, [sp, #20]
 80051e0:	e7c3      	b.n	800516a <_vfiprintf_r+0x176>
 80051e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80051e6:	4604      	mov	r4, r0
 80051e8:	2301      	movs	r3, #1
 80051ea:	e7f0      	b.n	80051ce <_vfiprintf_r+0x1da>
 80051ec:	ab03      	add	r3, sp, #12
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	462a      	mov	r2, r5
 80051f2:	4b16      	ldr	r3, [pc, #88]	; (800524c <_vfiprintf_r+0x258>)
 80051f4:	a904      	add	r1, sp, #16
 80051f6:	4630      	mov	r0, r6
 80051f8:	f3af 8000 	nop.w
 80051fc:	4607      	mov	r7, r0
 80051fe:	1c78      	adds	r0, r7, #1
 8005200:	d1d6      	bne.n	80051b0 <_vfiprintf_r+0x1bc>
 8005202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005204:	07d9      	lsls	r1, r3, #31
 8005206:	d405      	bmi.n	8005214 <_vfiprintf_r+0x220>
 8005208:	89ab      	ldrh	r3, [r5, #12]
 800520a:	059a      	lsls	r2, r3, #22
 800520c:	d402      	bmi.n	8005214 <_vfiprintf_r+0x220>
 800520e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005210:	f000 fc45 	bl	8005a9e <__retarget_lock_release_recursive>
 8005214:	89ab      	ldrh	r3, [r5, #12]
 8005216:	065b      	lsls	r3, r3, #25
 8005218:	f53f af12 	bmi.w	8005040 <_vfiprintf_r+0x4c>
 800521c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800521e:	e711      	b.n	8005044 <_vfiprintf_r+0x50>
 8005220:	ab03      	add	r3, sp, #12
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	462a      	mov	r2, r5
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <_vfiprintf_r+0x258>)
 8005228:	a904      	add	r1, sp, #16
 800522a:	4630      	mov	r0, r6
 800522c:	f000 f880 	bl	8005330 <_printf_i>
 8005230:	e7e4      	b.n	80051fc <_vfiprintf_r+0x208>
 8005232:	bf00      	nop
 8005234:	08005f78 	.word	0x08005f78
 8005238:	08005f98 	.word	0x08005f98
 800523c:	08005f58 	.word	0x08005f58
 8005240:	08005f22 	.word	0x08005f22
 8005244:	08005f2c 	.word	0x08005f2c
 8005248:	00000000 	.word	0x00000000
 800524c:	08004fcf 	.word	0x08004fcf
 8005250:	08005f28 	.word	0x08005f28

08005254 <_printf_common>:
 8005254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005258:	4616      	mov	r6, r2
 800525a:	4699      	mov	r9, r3
 800525c:	688a      	ldr	r2, [r1, #8]
 800525e:	690b      	ldr	r3, [r1, #16]
 8005260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005264:	4293      	cmp	r3, r2
 8005266:	bfb8      	it	lt
 8005268:	4613      	movlt	r3, r2
 800526a:	6033      	str	r3, [r6, #0]
 800526c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005270:	4607      	mov	r7, r0
 8005272:	460c      	mov	r4, r1
 8005274:	b10a      	cbz	r2, 800527a <_printf_common+0x26>
 8005276:	3301      	adds	r3, #1
 8005278:	6033      	str	r3, [r6, #0]
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	0699      	lsls	r1, r3, #26
 800527e:	bf42      	ittt	mi
 8005280:	6833      	ldrmi	r3, [r6, #0]
 8005282:	3302      	addmi	r3, #2
 8005284:	6033      	strmi	r3, [r6, #0]
 8005286:	6825      	ldr	r5, [r4, #0]
 8005288:	f015 0506 	ands.w	r5, r5, #6
 800528c:	d106      	bne.n	800529c <_printf_common+0x48>
 800528e:	f104 0a19 	add.w	sl, r4, #25
 8005292:	68e3      	ldr	r3, [r4, #12]
 8005294:	6832      	ldr	r2, [r6, #0]
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	42ab      	cmp	r3, r5
 800529a:	dc26      	bgt.n	80052ea <_printf_common+0x96>
 800529c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052a0:	1e13      	subs	r3, r2, #0
 80052a2:	6822      	ldr	r2, [r4, #0]
 80052a4:	bf18      	it	ne
 80052a6:	2301      	movne	r3, #1
 80052a8:	0692      	lsls	r2, r2, #26
 80052aa:	d42b      	bmi.n	8005304 <_printf_common+0xb0>
 80052ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052b0:	4649      	mov	r1, r9
 80052b2:	4638      	mov	r0, r7
 80052b4:	47c0      	blx	r8
 80052b6:	3001      	adds	r0, #1
 80052b8:	d01e      	beq.n	80052f8 <_printf_common+0xa4>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	68e5      	ldr	r5, [r4, #12]
 80052be:	6832      	ldr	r2, [r6, #0]
 80052c0:	f003 0306 	and.w	r3, r3, #6
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	bf08      	it	eq
 80052c8:	1aad      	subeq	r5, r5, r2
 80052ca:	68a3      	ldr	r3, [r4, #8]
 80052cc:	6922      	ldr	r2, [r4, #16]
 80052ce:	bf0c      	ite	eq
 80052d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052d4:	2500      	movne	r5, #0
 80052d6:	4293      	cmp	r3, r2
 80052d8:	bfc4      	itt	gt
 80052da:	1a9b      	subgt	r3, r3, r2
 80052dc:	18ed      	addgt	r5, r5, r3
 80052de:	2600      	movs	r6, #0
 80052e0:	341a      	adds	r4, #26
 80052e2:	42b5      	cmp	r5, r6
 80052e4:	d11a      	bne.n	800531c <_printf_common+0xc8>
 80052e6:	2000      	movs	r0, #0
 80052e8:	e008      	b.n	80052fc <_printf_common+0xa8>
 80052ea:	2301      	movs	r3, #1
 80052ec:	4652      	mov	r2, sl
 80052ee:	4649      	mov	r1, r9
 80052f0:	4638      	mov	r0, r7
 80052f2:	47c0      	blx	r8
 80052f4:	3001      	adds	r0, #1
 80052f6:	d103      	bne.n	8005300 <_printf_common+0xac>
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005300:	3501      	adds	r5, #1
 8005302:	e7c6      	b.n	8005292 <_printf_common+0x3e>
 8005304:	18e1      	adds	r1, r4, r3
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	2030      	movs	r0, #48	; 0x30
 800530a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800530e:	4422      	add	r2, r4
 8005310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005318:	3302      	adds	r3, #2
 800531a:	e7c7      	b.n	80052ac <_printf_common+0x58>
 800531c:	2301      	movs	r3, #1
 800531e:	4622      	mov	r2, r4
 8005320:	4649      	mov	r1, r9
 8005322:	4638      	mov	r0, r7
 8005324:	47c0      	blx	r8
 8005326:	3001      	adds	r0, #1
 8005328:	d0e6      	beq.n	80052f8 <_printf_common+0xa4>
 800532a:	3601      	adds	r6, #1
 800532c:	e7d9      	b.n	80052e2 <_printf_common+0x8e>
	...

08005330 <_printf_i>:
 8005330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005334:	460c      	mov	r4, r1
 8005336:	4691      	mov	r9, r2
 8005338:	7e27      	ldrb	r7, [r4, #24]
 800533a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800533c:	2f78      	cmp	r7, #120	; 0x78
 800533e:	4680      	mov	r8, r0
 8005340:	469a      	mov	sl, r3
 8005342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005346:	d807      	bhi.n	8005358 <_printf_i+0x28>
 8005348:	2f62      	cmp	r7, #98	; 0x62
 800534a:	d80a      	bhi.n	8005362 <_printf_i+0x32>
 800534c:	2f00      	cmp	r7, #0
 800534e:	f000 80d8 	beq.w	8005502 <_printf_i+0x1d2>
 8005352:	2f58      	cmp	r7, #88	; 0x58
 8005354:	f000 80a3 	beq.w	800549e <_printf_i+0x16e>
 8005358:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800535c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005360:	e03a      	b.n	80053d8 <_printf_i+0xa8>
 8005362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005366:	2b15      	cmp	r3, #21
 8005368:	d8f6      	bhi.n	8005358 <_printf_i+0x28>
 800536a:	a001      	add	r0, pc, #4	; (adr r0, 8005370 <_printf_i+0x40>)
 800536c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005370:	080053c9 	.word	0x080053c9
 8005374:	080053dd 	.word	0x080053dd
 8005378:	08005359 	.word	0x08005359
 800537c:	08005359 	.word	0x08005359
 8005380:	08005359 	.word	0x08005359
 8005384:	08005359 	.word	0x08005359
 8005388:	080053dd 	.word	0x080053dd
 800538c:	08005359 	.word	0x08005359
 8005390:	08005359 	.word	0x08005359
 8005394:	08005359 	.word	0x08005359
 8005398:	08005359 	.word	0x08005359
 800539c:	080054e9 	.word	0x080054e9
 80053a0:	0800540d 	.word	0x0800540d
 80053a4:	080054cb 	.word	0x080054cb
 80053a8:	08005359 	.word	0x08005359
 80053ac:	08005359 	.word	0x08005359
 80053b0:	0800550b 	.word	0x0800550b
 80053b4:	08005359 	.word	0x08005359
 80053b8:	0800540d 	.word	0x0800540d
 80053bc:	08005359 	.word	0x08005359
 80053c0:	08005359 	.word	0x08005359
 80053c4:	080054d3 	.word	0x080054d3
 80053c8:	680b      	ldr	r3, [r1, #0]
 80053ca:	1d1a      	adds	r2, r3, #4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	600a      	str	r2, [r1, #0]
 80053d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053d8:	2301      	movs	r3, #1
 80053da:	e0a3      	b.n	8005524 <_printf_i+0x1f4>
 80053dc:	6825      	ldr	r5, [r4, #0]
 80053de:	6808      	ldr	r0, [r1, #0]
 80053e0:	062e      	lsls	r6, r5, #24
 80053e2:	f100 0304 	add.w	r3, r0, #4
 80053e6:	d50a      	bpl.n	80053fe <_printf_i+0xce>
 80053e8:	6805      	ldr	r5, [r0, #0]
 80053ea:	600b      	str	r3, [r1, #0]
 80053ec:	2d00      	cmp	r5, #0
 80053ee:	da03      	bge.n	80053f8 <_printf_i+0xc8>
 80053f0:	232d      	movs	r3, #45	; 0x2d
 80053f2:	426d      	negs	r5, r5
 80053f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f8:	485e      	ldr	r0, [pc, #376]	; (8005574 <_printf_i+0x244>)
 80053fa:	230a      	movs	r3, #10
 80053fc:	e019      	b.n	8005432 <_printf_i+0x102>
 80053fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005402:	6805      	ldr	r5, [r0, #0]
 8005404:	600b      	str	r3, [r1, #0]
 8005406:	bf18      	it	ne
 8005408:	b22d      	sxthne	r5, r5
 800540a:	e7ef      	b.n	80053ec <_printf_i+0xbc>
 800540c:	680b      	ldr	r3, [r1, #0]
 800540e:	6825      	ldr	r5, [r4, #0]
 8005410:	1d18      	adds	r0, r3, #4
 8005412:	6008      	str	r0, [r1, #0]
 8005414:	0628      	lsls	r0, r5, #24
 8005416:	d501      	bpl.n	800541c <_printf_i+0xec>
 8005418:	681d      	ldr	r5, [r3, #0]
 800541a:	e002      	b.n	8005422 <_printf_i+0xf2>
 800541c:	0669      	lsls	r1, r5, #25
 800541e:	d5fb      	bpl.n	8005418 <_printf_i+0xe8>
 8005420:	881d      	ldrh	r5, [r3, #0]
 8005422:	4854      	ldr	r0, [pc, #336]	; (8005574 <_printf_i+0x244>)
 8005424:	2f6f      	cmp	r7, #111	; 0x6f
 8005426:	bf0c      	ite	eq
 8005428:	2308      	moveq	r3, #8
 800542a:	230a      	movne	r3, #10
 800542c:	2100      	movs	r1, #0
 800542e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005432:	6866      	ldr	r6, [r4, #4]
 8005434:	60a6      	str	r6, [r4, #8]
 8005436:	2e00      	cmp	r6, #0
 8005438:	bfa2      	ittt	ge
 800543a:	6821      	ldrge	r1, [r4, #0]
 800543c:	f021 0104 	bicge.w	r1, r1, #4
 8005440:	6021      	strge	r1, [r4, #0]
 8005442:	b90d      	cbnz	r5, 8005448 <_printf_i+0x118>
 8005444:	2e00      	cmp	r6, #0
 8005446:	d04d      	beq.n	80054e4 <_printf_i+0x1b4>
 8005448:	4616      	mov	r6, r2
 800544a:	fbb5 f1f3 	udiv	r1, r5, r3
 800544e:	fb03 5711 	mls	r7, r3, r1, r5
 8005452:	5dc7      	ldrb	r7, [r0, r7]
 8005454:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005458:	462f      	mov	r7, r5
 800545a:	42bb      	cmp	r3, r7
 800545c:	460d      	mov	r5, r1
 800545e:	d9f4      	bls.n	800544a <_printf_i+0x11a>
 8005460:	2b08      	cmp	r3, #8
 8005462:	d10b      	bne.n	800547c <_printf_i+0x14c>
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	07df      	lsls	r7, r3, #31
 8005468:	d508      	bpl.n	800547c <_printf_i+0x14c>
 800546a:	6923      	ldr	r3, [r4, #16]
 800546c:	6861      	ldr	r1, [r4, #4]
 800546e:	4299      	cmp	r1, r3
 8005470:	bfde      	ittt	le
 8005472:	2330      	movle	r3, #48	; 0x30
 8005474:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005478:	f106 36ff 	addle.w	r6, r6, #4294967295
 800547c:	1b92      	subs	r2, r2, r6
 800547e:	6122      	str	r2, [r4, #16]
 8005480:	f8cd a000 	str.w	sl, [sp]
 8005484:	464b      	mov	r3, r9
 8005486:	aa03      	add	r2, sp, #12
 8005488:	4621      	mov	r1, r4
 800548a:	4640      	mov	r0, r8
 800548c:	f7ff fee2 	bl	8005254 <_printf_common>
 8005490:	3001      	adds	r0, #1
 8005492:	d14c      	bne.n	800552e <_printf_i+0x1fe>
 8005494:	f04f 30ff 	mov.w	r0, #4294967295
 8005498:	b004      	add	sp, #16
 800549a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549e:	4835      	ldr	r0, [pc, #212]	; (8005574 <_printf_i+0x244>)
 80054a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	680e      	ldr	r6, [r1, #0]
 80054a8:	061f      	lsls	r7, r3, #24
 80054aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80054ae:	600e      	str	r6, [r1, #0]
 80054b0:	d514      	bpl.n	80054dc <_printf_i+0x1ac>
 80054b2:	07d9      	lsls	r1, r3, #31
 80054b4:	bf44      	itt	mi
 80054b6:	f043 0320 	orrmi.w	r3, r3, #32
 80054ba:	6023      	strmi	r3, [r4, #0]
 80054bc:	b91d      	cbnz	r5, 80054c6 <_printf_i+0x196>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	f023 0320 	bic.w	r3, r3, #32
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	2310      	movs	r3, #16
 80054c8:	e7b0      	b.n	800542c <_printf_i+0xfc>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	f043 0320 	orr.w	r3, r3, #32
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	2378      	movs	r3, #120	; 0x78
 80054d4:	4828      	ldr	r0, [pc, #160]	; (8005578 <_printf_i+0x248>)
 80054d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054da:	e7e3      	b.n	80054a4 <_printf_i+0x174>
 80054dc:	065e      	lsls	r6, r3, #25
 80054de:	bf48      	it	mi
 80054e0:	b2ad      	uxthmi	r5, r5
 80054e2:	e7e6      	b.n	80054b2 <_printf_i+0x182>
 80054e4:	4616      	mov	r6, r2
 80054e6:	e7bb      	b.n	8005460 <_printf_i+0x130>
 80054e8:	680b      	ldr	r3, [r1, #0]
 80054ea:	6826      	ldr	r6, [r4, #0]
 80054ec:	6960      	ldr	r0, [r4, #20]
 80054ee:	1d1d      	adds	r5, r3, #4
 80054f0:	600d      	str	r5, [r1, #0]
 80054f2:	0635      	lsls	r5, r6, #24
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	d501      	bpl.n	80054fc <_printf_i+0x1cc>
 80054f8:	6018      	str	r0, [r3, #0]
 80054fa:	e002      	b.n	8005502 <_printf_i+0x1d2>
 80054fc:	0671      	lsls	r1, r6, #25
 80054fe:	d5fb      	bpl.n	80054f8 <_printf_i+0x1c8>
 8005500:	8018      	strh	r0, [r3, #0]
 8005502:	2300      	movs	r3, #0
 8005504:	6123      	str	r3, [r4, #16]
 8005506:	4616      	mov	r6, r2
 8005508:	e7ba      	b.n	8005480 <_printf_i+0x150>
 800550a:	680b      	ldr	r3, [r1, #0]
 800550c:	1d1a      	adds	r2, r3, #4
 800550e:	600a      	str	r2, [r1, #0]
 8005510:	681e      	ldr	r6, [r3, #0]
 8005512:	6862      	ldr	r2, [r4, #4]
 8005514:	2100      	movs	r1, #0
 8005516:	4630      	mov	r0, r6
 8005518:	f7fa fe32 	bl	8000180 <memchr>
 800551c:	b108      	cbz	r0, 8005522 <_printf_i+0x1f2>
 800551e:	1b80      	subs	r0, r0, r6
 8005520:	6060      	str	r0, [r4, #4]
 8005522:	6863      	ldr	r3, [r4, #4]
 8005524:	6123      	str	r3, [r4, #16]
 8005526:	2300      	movs	r3, #0
 8005528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552c:	e7a8      	b.n	8005480 <_printf_i+0x150>
 800552e:	6923      	ldr	r3, [r4, #16]
 8005530:	4632      	mov	r2, r6
 8005532:	4649      	mov	r1, r9
 8005534:	4640      	mov	r0, r8
 8005536:	47d0      	blx	sl
 8005538:	3001      	adds	r0, #1
 800553a:	d0ab      	beq.n	8005494 <_printf_i+0x164>
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	079b      	lsls	r3, r3, #30
 8005540:	d413      	bmi.n	800556a <_printf_i+0x23a>
 8005542:	68e0      	ldr	r0, [r4, #12]
 8005544:	9b03      	ldr	r3, [sp, #12]
 8005546:	4298      	cmp	r0, r3
 8005548:	bfb8      	it	lt
 800554a:	4618      	movlt	r0, r3
 800554c:	e7a4      	b.n	8005498 <_printf_i+0x168>
 800554e:	2301      	movs	r3, #1
 8005550:	4632      	mov	r2, r6
 8005552:	4649      	mov	r1, r9
 8005554:	4640      	mov	r0, r8
 8005556:	47d0      	blx	sl
 8005558:	3001      	adds	r0, #1
 800555a:	d09b      	beq.n	8005494 <_printf_i+0x164>
 800555c:	3501      	adds	r5, #1
 800555e:	68e3      	ldr	r3, [r4, #12]
 8005560:	9903      	ldr	r1, [sp, #12]
 8005562:	1a5b      	subs	r3, r3, r1
 8005564:	42ab      	cmp	r3, r5
 8005566:	dcf2      	bgt.n	800554e <_printf_i+0x21e>
 8005568:	e7eb      	b.n	8005542 <_printf_i+0x212>
 800556a:	2500      	movs	r5, #0
 800556c:	f104 0619 	add.w	r6, r4, #25
 8005570:	e7f5      	b.n	800555e <_printf_i+0x22e>
 8005572:	bf00      	nop
 8005574:	08005f33 	.word	0x08005f33
 8005578:	08005f44 	.word	0x08005f44

0800557c <_sbrk_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4d06      	ldr	r5, [pc, #24]	; (8005598 <_sbrk_r+0x1c>)
 8005580:	2300      	movs	r3, #0
 8005582:	4604      	mov	r4, r0
 8005584:	4608      	mov	r0, r1
 8005586:	602b      	str	r3, [r5, #0]
 8005588:	f7fb ff48 	bl	800141c <_sbrk>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	d102      	bne.n	8005596 <_sbrk_r+0x1a>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	b103      	cbz	r3, 8005596 <_sbrk_r+0x1a>
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	bd38      	pop	{r3, r4, r5, pc}
 8005598:	200004b4 	.word	0x200004b4

0800559c <__swbuf_r>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	460e      	mov	r6, r1
 80055a0:	4614      	mov	r4, r2
 80055a2:	4605      	mov	r5, r0
 80055a4:	b118      	cbz	r0, 80055ae <__swbuf_r+0x12>
 80055a6:	6983      	ldr	r3, [r0, #24]
 80055a8:	b90b      	cbnz	r3, 80055ae <__swbuf_r+0x12>
 80055aa:	f000 f9d9 	bl	8005960 <__sinit>
 80055ae:	4b21      	ldr	r3, [pc, #132]	; (8005634 <__swbuf_r+0x98>)
 80055b0:	429c      	cmp	r4, r3
 80055b2:	d12b      	bne.n	800560c <__swbuf_r+0x70>
 80055b4:	686c      	ldr	r4, [r5, #4]
 80055b6:	69a3      	ldr	r3, [r4, #24]
 80055b8:	60a3      	str	r3, [r4, #8]
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	071a      	lsls	r2, r3, #28
 80055be:	d52f      	bpl.n	8005620 <__swbuf_r+0x84>
 80055c0:	6923      	ldr	r3, [r4, #16]
 80055c2:	b36b      	cbz	r3, 8005620 <__swbuf_r+0x84>
 80055c4:	6923      	ldr	r3, [r4, #16]
 80055c6:	6820      	ldr	r0, [r4, #0]
 80055c8:	1ac0      	subs	r0, r0, r3
 80055ca:	6963      	ldr	r3, [r4, #20]
 80055cc:	b2f6      	uxtb	r6, r6
 80055ce:	4283      	cmp	r3, r0
 80055d0:	4637      	mov	r7, r6
 80055d2:	dc04      	bgt.n	80055de <__swbuf_r+0x42>
 80055d4:	4621      	mov	r1, r4
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 f92e 	bl	8005838 <_fflush_r>
 80055dc:	bb30      	cbnz	r0, 800562c <__swbuf_r+0x90>
 80055de:	68a3      	ldr	r3, [r4, #8]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	60a3      	str	r3, [r4, #8]
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	6022      	str	r2, [r4, #0]
 80055ea:	701e      	strb	r6, [r3, #0]
 80055ec:	6963      	ldr	r3, [r4, #20]
 80055ee:	3001      	adds	r0, #1
 80055f0:	4283      	cmp	r3, r0
 80055f2:	d004      	beq.n	80055fe <__swbuf_r+0x62>
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	07db      	lsls	r3, r3, #31
 80055f8:	d506      	bpl.n	8005608 <__swbuf_r+0x6c>
 80055fa:	2e0a      	cmp	r6, #10
 80055fc:	d104      	bne.n	8005608 <__swbuf_r+0x6c>
 80055fe:	4621      	mov	r1, r4
 8005600:	4628      	mov	r0, r5
 8005602:	f000 f919 	bl	8005838 <_fflush_r>
 8005606:	b988      	cbnz	r0, 800562c <__swbuf_r+0x90>
 8005608:	4638      	mov	r0, r7
 800560a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <__swbuf_r+0x9c>)
 800560e:	429c      	cmp	r4, r3
 8005610:	d101      	bne.n	8005616 <__swbuf_r+0x7a>
 8005612:	68ac      	ldr	r4, [r5, #8]
 8005614:	e7cf      	b.n	80055b6 <__swbuf_r+0x1a>
 8005616:	4b09      	ldr	r3, [pc, #36]	; (800563c <__swbuf_r+0xa0>)
 8005618:	429c      	cmp	r4, r3
 800561a:	bf08      	it	eq
 800561c:	68ec      	ldreq	r4, [r5, #12]
 800561e:	e7ca      	b.n	80055b6 <__swbuf_r+0x1a>
 8005620:	4621      	mov	r1, r4
 8005622:	4628      	mov	r0, r5
 8005624:	f000 f80c 	bl	8005640 <__swsetup_r>
 8005628:	2800      	cmp	r0, #0
 800562a:	d0cb      	beq.n	80055c4 <__swbuf_r+0x28>
 800562c:	f04f 37ff 	mov.w	r7, #4294967295
 8005630:	e7ea      	b.n	8005608 <__swbuf_r+0x6c>
 8005632:	bf00      	nop
 8005634:	08005f78 	.word	0x08005f78
 8005638:	08005f98 	.word	0x08005f98
 800563c:	08005f58 	.word	0x08005f58

08005640 <__swsetup_r>:
 8005640:	4b32      	ldr	r3, [pc, #200]	; (800570c <__swsetup_r+0xcc>)
 8005642:	b570      	push	{r4, r5, r6, lr}
 8005644:	681d      	ldr	r5, [r3, #0]
 8005646:	4606      	mov	r6, r0
 8005648:	460c      	mov	r4, r1
 800564a:	b125      	cbz	r5, 8005656 <__swsetup_r+0x16>
 800564c:	69ab      	ldr	r3, [r5, #24]
 800564e:	b913      	cbnz	r3, 8005656 <__swsetup_r+0x16>
 8005650:	4628      	mov	r0, r5
 8005652:	f000 f985 	bl	8005960 <__sinit>
 8005656:	4b2e      	ldr	r3, [pc, #184]	; (8005710 <__swsetup_r+0xd0>)
 8005658:	429c      	cmp	r4, r3
 800565a:	d10f      	bne.n	800567c <__swsetup_r+0x3c>
 800565c:	686c      	ldr	r4, [r5, #4]
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005664:	0719      	lsls	r1, r3, #28
 8005666:	d42c      	bmi.n	80056c2 <__swsetup_r+0x82>
 8005668:	06dd      	lsls	r5, r3, #27
 800566a:	d411      	bmi.n	8005690 <__swsetup_r+0x50>
 800566c:	2309      	movs	r3, #9
 800566e:	6033      	str	r3, [r6, #0]
 8005670:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005674:	81a3      	strh	r3, [r4, #12]
 8005676:	f04f 30ff 	mov.w	r0, #4294967295
 800567a:	e03e      	b.n	80056fa <__swsetup_r+0xba>
 800567c:	4b25      	ldr	r3, [pc, #148]	; (8005714 <__swsetup_r+0xd4>)
 800567e:	429c      	cmp	r4, r3
 8005680:	d101      	bne.n	8005686 <__swsetup_r+0x46>
 8005682:	68ac      	ldr	r4, [r5, #8]
 8005684:	e7eb      	b.n	800565e <__swsetup_r+0x1e>
 8005686:	4b24      	ldr	r3, [pc, #144]	; (8005718 <__swsetup_r+0xd8>)
 8005688:	429c      	cmp	r4, r3
 800568a:	bf08      	it	eq
 800568c:	68ec      	ldreq	r4, [r5, #12]
 800568e:	e7e6      	b.n	800565e <__swsetup_r+0x1e>
 8005690:	0758      	lsls	r0, r3, #29
 8005692:	d512      	bpl.n	80056ba <__swsetup_r+0x7a>
 8005694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005696:	b141      	cbz	r1, 80056aa <__swsetup_r+0x6a>
 8005698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800569c:	4299      	cmp	r1, r3
 800569e:	d002      	beq.n	80056a6 <__swsetup_r+0x66>
 80056a0:	4630      	mov	r0, r6
 80056a2:	f7ff fbd3 	bl	8004e4c <_free_r>
 80056a6:	2300      	movs	r3, #0
 80056a8:	6363      	str	r3, [r4, #52]	; 0x34
 80056aa:	89a3      	ldrh	r3, [r4, #12]
 80056ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056b0:	81a3      	strh	r3, [r4, #12]
 80056b2:	2300      	movs	r3, #0
 80056b4:	6063      	str	r3, [r4, #4]
 80056b6:	6923      	ldr	r3, [r4, #16]
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	89a3      	ldrh	r3, [r4, #12]
 80056bc:	f043 0308 	orr.w	r3, r3, #8
 80056c0:	81a3      	strh	r3, [r4, #12]
 80056c2:	6923      	ldr	r3, [r4, #16]
 80056c4:	b94b      	cbnz	r3, 80056da <__swsetup_r+0x9a>
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d0:	d003      	beq.n	80056da <__swsetup_r+0x9a>
 80056d2:	4621      	mov	r1, r4
 80056d4:	4630      	mov	r0, r6
 80056d6:	f000 fa07 	bl	8005ae8 <__smakebuf_r>
 80056da:	89a0      	ldrh	r0, [r4, #12]
 80056dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056e0:	f010 0301 	ands.w	r3, r0, #1
 80056e4:	d00a      	beq.n	80056fc <__swsetup_r+0xbc>
 80056e6:	2300      	movs	r3, #0
 80056e8:	60a3      	str	r3, [r4, #8]
 80056ea:	6963      	ldr	r3, [r4, #20]
 80056ec:	425b      	negs	r3, r3
 80056ee:	61a3      	str	r3, [r4, #24]
 80056f0:	6923      	ldr	r3, [r4, #16]
 80056f2:	b943      	cbnz	r3, 8005706 <__swsetup_r+0xc6>
 80056f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056f8:	d1ba      	bne.n	8005670 <__swsetup_r+0x30>
 80056fa:	bd70      	pop	{r4, r5, r6, pc}
 80056fc:	0781      	lsls	r1, r0, #30
 80056fe:	bf58      	it	pl
 8005700:	6963      	ldrpl	r3, [r4, #20]
 8005702:	60a3      	str	r3, [r4, #8]
 8005704:	e7f4      	b.n	80056f0 <__swsetup_r+0xb0>
 8005706:	2000      	movs	r0, #0
 8005708:	e7f7      	b.n	80056fa <__swsetup_r+0xba>
 800570a:	bf00      	nop
 800570c:	20000024 	.word	0x20000024
 8005710:	08005f78 	.word	0x08005f78
 8005714:	08005f98 	.word	0x08005f98
 8005718:	08005f58 	.word	0x08005f58

0800571c <abort>:
 800571c:	b508      	push	{r3, lr}
 800571e:	2006      	movs	r0, #6
 8005720:	f000 fa56 	bl	8005bd0 <raise>
 8005724:	2001      	movs	r0, #1
 8005726:	f7fb fe01 	bl	800132c <_exit>
	...

0800572c <__sflush_r>:
 800572c:	898a      	ldrh	r2, [r1, #12]
 800572e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005732:	4605      	mov	r5, r0
 8005734:	0710      	lsls	r0, r2, #28
 8005736:	460c      	mov	r4, r1
 8005738:	d458      	bmi.n	80057ec <__sflush_r+0xc0>
 800573a:	684b      	ldr	r3, [r1, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	dc05      	bgt.n	800574c <__sflush_r+0x20>
 8005740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	dc02      	bgt.n	800574c <__sflush_r+0x20>
 8005746:	2000      	movs	r0, #0
 8005748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800574c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800574e:	2e00      	cmp	r6, #0
 8005750:	d0f9      	beq.n	8005746 <__sflush_r+0x1a>
 8005752:	2300      	movs	r3, #0
 8005754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005758:	682f      	ldr	r7, [r5, #0]
 800575a:	602b      	str	r3, [r5, #0]
 800575c:	d032      	beq.n	80057c4 <__sflush_r+0x98>
 800575e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005760:	89a3      	ldrh	r3, [r4, #12]
 8005762:	075a      	lsls	r2, r3, #29
 8005764:	d505      	bpl.n	8005772 <__sflush_r+0x46>
 8005766:	6863      	ldr	r3, [r4, #4]
 8005768:	1ac0      	subs	r0, r0, r3
 800576a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800576c:	b10b      	cbz	r3, 8005772 <__sflush_r+0x46>
 800576e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005770:	1ac0      	subs	r0, r0, r3
 8005772:	2300      	movs	r3, #0
 8005774:	4602      	mov	r2, r0
 8005776:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005778:	6a21      	ldr	r1, [r4, #32]
 800577a:	4628      	mov	r0, r5
 800577c:	47b0      	blx	r6
 800577e:	1c43      	adds	r3, r0, #1
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	d106      	bne.n	8005792 <__sflush_r+0x66>
 8005784:	6829      	ldr	r1, [r5, #0]
 8005786:	291d      	cmp	r1, #29
 8005788:	d82c      	bhi.n	80057e4 <__sflush_r+0xb8>
 800578a:	4a2a      	ldr	r2, [pc, #168]	; (8005834 <__sflush_r+0x108>)
 800578c:	40ca      	lsrs	r2, r1
 800578e:	07d6      	lsls	r6, r2, #31
 8005790:	d528      	bpl.n	80057e4 <__sflush_r+0xb8>
 8005792:	2200      	movs	r2, #0
 8005794:	6062      	str	r2, [r4, #4]
 8005796:	04d9      	lsls	r1, r3, #19
 8005798:	6922      	ldr	r2, [r4, #16]
 800579a:	6022      	str	r2, [r4, #0]
 800579c:	d504      	bpl.n	80057a8 <__sflush_r+0x7c>
 800579e:	1c42      	adds	r2, r0, #1
 80057a0:	d101      	bne.n	80057a6 <__sflush_r+0x7a>
 80057a2:	682b      	ldr	r3, [r5, #0]
 80057a4:	b903      	cbnz	r3, 80057a8 <__sflush_r+0x7c>
 80057a6:	6560      	str	r0, [r4, #84]	; 0x54
 80057a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057aa:	602f      	str	r7, [r5, #0]
 80057ac:	2900      	cmp	r1, #0
 80057ae:	d0ca      	beq.n	8005746 <__sflush_r+0x1a>
 80057b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057b4:	4299      	cmp	r1, r3
 80057b6:	d002      	beq.n	80057be <__sflush_r+0x92>
 80057b8:	4628      	mov	r0, r5
 80057ba:	f7ff fb47 	bl	8004e4c <_free_r>
 80057be:	2000      	movs	r0, #0
 80057c0:	6360      	str	r0, [r4, #52]	; 0x34
 80057c2:	e7c1      	b.n	8005748 <__sflush_r+0x1c>
 80057c4:	6a21      	ldr	r1, [r4, #32]
 80057c6:	2301      	movs	r3, #1
 80057c8:	4628      	mov	r0, r5
 80057ca:	47b0      	blx	r6
 80057cc:	1c41      	adds	r1, r0, #1
 80057ce:	d1c7      	bne.n	8005760 <__sflush_r+0x34>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0c4      	beq.n	8005760 <__sflush_r+0x34>
 80057d6:	2b1d      	cmp	r3, #29
 80057d8:	d001      	beq.n	80057de <__sflush_r+0xb2>
 80057da:	2b16      	cmp	r3, #22
 80057dc:	d101      	bne.n	80057e2 <__sflush_r+0xb6>
 80057de:	602f      	str	r7, [r5, #0]
 80057e0:	e7b1      	b.n	8005746 <__sflush_r+0x1a>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057e8:	81a3      	strh	r3, [r4, #12]
 80057ea:	e7ad      	b.n	8005748 <__sflush_r+0x1c>
 80057ec:	690f      	ldr	r7, [r1, #16]
 80057ee:	2f00      	cmp	r7, #0
 80057f0:	d0a9      	beq.n	8005746 <__sflush_r+0x1a>
 80057f2:	0793      	lsls	r3, r2, #30
 80057f4:	680e      	ldr	r6, [r1, #0]
 80057f6:	bf08      	it	eq
 80057f8:	694b      	ldreq	r3, [r1, #20]
 80057fa:	600f      	str	r7, [r1, #0]
 80057fc:	bf18      	it	ne
 80057fe:	2300      	movne	r3, #0
 8005800:	eba6 0807 	sub.w	r8, r6, r7
 8005804:	608b      	str	r3, [r1, #8]
 8005806:	f1b8 0f00 	cmp.w	r8, #0
 800580a:	dd9c      	ble.n	8005746 <__sflush_r+0x1a>
 800580c:	6a21      	ldr	r1, [r4, #32]
 800580e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005810:	4643      	mov	r3, r8
 8005812:	463a      	mov	r2, r7
 8005814:	4628      	mov	r0, r5
 8005816:	47b0      	blx	r6
 8005818:	2800      	cmp	r0, #0
 800581a:	dc06      	bgt.n	800582a <__sflush_r+0xfe>
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005822:	81a3      	strh	r3, [r4, #12]
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	e78e      	b.n	8005748 <__sflush_r+0x1c>
 800582a:	4407      	add	r7, r0
 800582c:	eba8 0800 	sub.w	r8, r8, r0
 8005830:	e7e9      	b.n	8005806 <__sflush_r+0xda>
 8005832:	bf00      	nop
 8005834:	20400001 	.word	0x20400001

08005838 <_fflush_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	690b      	ldr	r3, [r1, #16]
 800583c:	4605      	mov	r5, r0
 800583e:	460c      	mov	r4, r1
 8005840:	b913      	cbnz	r3, 8005848 <_fflush_r+0x10>
 8005842:	2500      	movs	r5, #0
 8005844:	4628      	mov	r0, r5
 8005846:	bd38      	pop	{r3, r4, r5, pc}
 8005848:	b118      	cbz	r0, 8005852 <_fflush_r+0x1a>
 800584a:	6983      	ldr	r3, [r0, #24]
 800584c:	b90b      	cbnz	r3, 8005852 <_fflush_r+0x1a>
 800584e:	f000 f887 	bl	8005960 <__sinit>
 8005852:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <_fflush_r+0x6c>)
 8005854:	429c      	cmp	r4, r3
 8005856:	d11b      	bne.n	8005890 <_fflush_r+0x58>
 8005858:	686c      	ldr	r4, [r5, #4]
 800585a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0ef      	beq.n	8005842 <_fflush_r+0xa>
 8005862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005864:	07d0      	lsls	r0, r2, #31
 8005866:	d404      	bmi.n	8005872 <_fflush_r+0x3a>
 8005868:	0599      	lsls	r1, r3, #22
 800586a:	d402      	bmi.n	8005872 <_fflush_r+0x3a>
 800586c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800586e:	f000 f915 	bl	8005a9c <__retarget_lock_acquire_recursive>
 8005872:	4628      	mov	r0, r5
 8005874:	4621      	mov	r1, r4
 8005876:	f7ff ff59 	bl	800572c <__sflush_r>
 800587a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800587c:	07da      	lsls	r2, r3, #31
 800587e:	4605      	mov	r5, r0
 8005880:	d4e0      	bmi.n	8005844 <_fflush_r+0xc>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	059b      	lsls	r3, r3, #22
 8005886:	d4dd      	bmi.n	8005844 <_fflush_r+0xc>
 8005888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800588a:	f000 f908 	bl	8005a9e <__retarget_lock_release_recursive>
 800588e:	e7d9      	b.n	8005844 <_fflush_r+0xc>
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <_fflush_r+0x70>)
 8005892:	429c      	cmp	r4, r3
 8005894:	d101      	bne.n	800589a <_fflush_r+0x62>
 8005896:	68ac      	ldr	r4, [r5, #8]
 8005898:	e7df      	b.n	800585a <_fflush_r+0x22>
 800589a:	4b04      	ldr	r3, [pc, #16]	; (80058ac <_fflush_r+0x74>)
 800589c:	429c      	cmp	r4, r3
 800589e:	bf08      	it	eq
 80058a0:	68ec      	ldreq	r4, [r5, #12]
 80058a2:	e7da      	b.n	800585a <_fflush_r+0x22>
 80058a4:	08005f78 	.word	0x08005f78
 80058a8:	08005f98 	.word	0x08005f98
 80058ac:	08005f58 	.word	0x08005f58

080058b0 <std>:
 80058b0:	2300      	movs	r3, #0
 80058b2:	b510      	push	{r4, lr}
 80058b4:	4604      	mov	r4, r0
 80058b6:	e9c0 3300 	strd	r3, r3, [r0]
 80058ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058be:	6083      	str	r3, [r0, #8]
 80058c0:	8181      	strh	r1, [r0, #12]
 80058c2:	6643      	str	r3, [r0, #100]	; 0x64
 80058c4:	81c2      	strh	r2, [r0, #14]
 80058c6:	6183      	str	r3, [r0, #24]
 80058c8:	4619      	mov	r1, r3
 80058ca:	2208      	movs	r2, #8
 80058cc:	305c      	adds	r0, #92	; 0x5c
 80058ce:	f7ff fa3d 	bl	8004d4c <memset>
 80058d2:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <std+0x38>)
 80058d4:	6263      	str	r3, [r4, #36]	; 0x24
 80058d6:	4b05      	ldr	r3, [pc, #20]	; (80058ec <std+0x3c>)
 80058d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <std+0x40>)
 80058dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058de:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <std+0x44>)
 80058e0:	6224      	str	r4, [r4, #32]
 80058e2:	6323      	str	r3, [r4, #48]	; 0x30
 80058e4:	bd10      	pop	{r4, pc}
 80058e6:	bf00      	nop
 80058e8:	08005c09 	.word	0x08005c09
 80058ec:	08005c2b 	.word	0x08005c2b
 80058f0:	08005c63 	.word	0x08005c63
 80058f4:	08005c87 	.word	0x08005c87

080058f8 <_cleanup_r>:
 80058f8:	4901      	ldr	r1, [pc, #4]	; (8005900 <_cleanup_r+0x8>)
 80058fa:	f000 b8af 	b.w	8005a5c <_fwalk_reent>
 80058fe:	bf00      	nop
 8005900:	08005839 	.word	0x08005839

08005904 <__sfmoreglue>:
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	1e4a      	subs	r2, r1, #1
 8005908:	2568      	movs	r5, #104	; 0x68
 800590a:	4355      	muls	r5, r2
 800590c:	460e      	mov	r6, r1
 800590e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005912:	f7ff faeb 	bl	8004eec <_malloc_r>
 8005916:	4604      	mov	r4, r0
 8005918:	b140      	cbz	r0, 800592c <__sfmoreglue+0x28>
 800591a:	2100      	movs	r1, #0
 800591c:	e9c0 1600 	strd	r1, r6, [r0]
 8005920:	300c      	adds	r0, #12
 8005922:	60a0      	str	r0, [r4, #8]
 8005924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005928:	f7ff fa10 	bl	8004d4c <memset>
 800592c:	4620      	mov	r0, r4
 800592e:	bd70      	pop	{r4, r5, r6, pc}

08005930 <__sfp_lock_acquire>:
 8005930:	4801      	ldr	r0, [pc, #4]	; (8005938 <__sfp_lock_acquire+0x8>)
 8005932:	f000 b8b3 	b.w	8005a9c <__retarget_lock_acquire_recursive>
 8005936:	bf00      	nop
 8005938:	200004b0 	.word	0x200004b0

0800593c <__sfp_lock_release>:
 800593c:	4801      	ldr	r0, [pc, #4]	; (8005944 <__sfp_lock_release+0x8>)
 800593e:	f000 b8ae 	b.w	8005a9e <__retarget_lock_release_recursive>
 8005942:	bf00      	nop
 8005944:	200004b0 	.word	0x200004b0

08005948 <__sinit_lock_acquire>:
 8005948:	4801      	ldr	r0, [pc, #4]	; (8005950 <__sinit_lock_acquire+0x8>)
 800594a:	f000 b8a7 	b.w	8005a9c <__retarget_lock_acquire_recursive>
 800594e:	bf00      	nop
 8005950:	200004ab 	.word	0x200004ab

08005954 <__sinit_lock_release>:
 8005954:	4801      	ldr	r0, [pc, #4]	; (800595c <__sinit_lock_release+0x8>)
 8005956:	f000 b8a2 	b.w	8005a9e <__retarget_lock_release_recursive>
 800595a:	bf00      	nop
 800595c:	200004ab 	.word	0x200004ab

08005960 <__sinit>:
 8005960:	b510      	push	{r4, lr}
 8005962:	4604      	mov	r4, r0
 8005964:	f7ff fff0 	bl	8005948 <__sinit_lock_acquire>
 8005968:	69a3      	ldr	r3, [r4, #24]
 800596a:	b11b      	cbz	r3, 8005974 <__sinit+0x14>
 800596c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005970:	f7ff bff0 	b.w	8005954 <__sinit_lock_release>
 8005974:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005978:	6523      	str	r3, [r4, #80]	; 0x50
 800597a:	4b13      	ldr	r3, [pc, #76]	; (80059c8 <__sinit+0x68>)
 800597c:	4a13      	ldr	r2, [pc, #76]	; (80059cc <__sinit+0x6c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	62a2      	str	r2, [r4, #40]	; 0x28
 8005982:	42a3      	cmp	r3, r4
 8005984:	bf04      	itt	eq
 8005986:	2301      	moveq	r3, #1
 8005988:	61a3      	streq	r3, [r4, #24]
 800598a:	4620      	mov	r0, r4
 800598c:	f000 f820 	bl	80059d0 <__sfp>
 8005990:	6060      	str	r0, [r4, #4]
 8005992:	4620      	mov	r0, r4
 8005994:	f000 f81c 	bl	80059d0 <__sfp>
 8005998:	60a0      	str	r0, [r4, #8]
 800599a:	4620      	mov	r0, r4
 800599c:	f000 f818 	bl	80059d0 <__sfp>
 80059a0:	2200      	movs	r2, #0
 80059a2:	60e0      	str	r0, [r4, #12]
 80059a4:	2104      	movs	r1, #4
 80059a6:	6860      	ldr	r0, [r4, #4]
 80059a8:	f7ff ff82 	bl	80058b0 <std>
 80059ac:	68a0      	ldr	r0, [r4, #8]
 80059ae:	2201      	movs	r2, #1
 80059b0:	2109      	movs	r1, #9
 80059b2:	f7ff ff7d 	bl	80058b0 <std>
 80059b6:	68e0      	ldr	r0, [r4, #12]
 80059b8:	2202      	movs	r2, #2
 80059ba:	2112      	movs	r1, #18
 80059bc:	f7ff ff78 	bl	80058b0 <std>
 80059c0:	2301      	movs	r3, #1
 80059c2:	61a3      	str	r3, [r4, #24]
 80059c4:	e7d2      	b.n	800596c <__sinit+0xc>
 80059c6:	bf00      	nop
 80059c8:	08005e6c 	.word	0x08005e6c
 80059cc:	080058f9 	.word	0x080058f9

080059d0 <__sfp>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	4607      	mov	r7, r0
 80059d4:	f7ff ffac 	bl	8005930 <__sfp_lock_acquire>
 80059d8:	4b1e      	ldr	r3, [pc, #120]	; (8005a54 <__sfp+0x84>)
 80059da:	681e      	ldr	r6, [r3, #0]
 80059dc:	69b3      	ldr	r3, [r6, #24]
 80059de:	b913      	cbnz	r3, 80059e6 <__sfp+0x16>
 80059e0:	4630      	mov	r0, r6
 80059e2:	f7ff ffbd 	bl	8005960 <__sinit>
 80059e6:	3648      	adds	r6, #72	; 0x48
 80059e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	d503      	bpl.n	80059f8 <__sfp+0x28>
 80059f0:	6833      	ldr	r3, [r6, #0]
 80059f2:	b30b      	cbz	r3, 8005a38 <__sfp+0x68>
 80059f4:	6836      	ldr	r6, [r6, #0]
 80059f6:	e7f7      	b.n	80059e8 <__sfp+0x18>
 80059f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059fc:	b9d5      	cbnz	r5, 8005a34 <__sfp+0x64>
 80059fe:	4b16      	ldr	r3, [pc, #88]	; (8005a58 <__sfp+0x88>)
 8005a00:	60e3      	str	r3, [r4, #12]
 8005a02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a06:	6665      	str	r5, [r4, #100]	; 0x64
 8005a08:	f000 f847 	bl	8005a9a <__retarget_lock_init_recursive>
 8005a0c:	f7ff ff96 	bl	800593c <__sfp_lock_release>
 8005a10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a18:	6025      	str	r5, [r4, #0]
 8005a1a:	61a5      	str	r5, [r4, #24]
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	4629      	mov	r1, r5
 8005a20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a24:	f7ff f992 	bl	8004d4c <memset>
 8005a28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a30:	4620      	mov	r0, r4
 8005a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a34:	3468      	adds	r4, #104	; 0x68
 8005a36:	e7d9      	b.n	80059ec <__sfp+0x1c>
 8005a38:	2104      	movs	r1, #4
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	f7ff ff62 	bl	8005904 <__sfmoreglue>
 8005a40:	4604      	mov	r4, r0
 8005a42:	6030      	str	r0, [r6, #0]
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d1d5      	bne.n	80059f4 <__sfp+0x24>
 8005a48:	f7ff ff78 	bl	800593c <__sfp_lock_release>
 8005a4c:	230c      	movs	r3, #12
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	e7ee      	b.n	8005a30 <__sfp+0x60>
 8005a52:	bf00      	nop
 8005a54:	08005e6c 	.word	0x08005e6c
 8005a58:	ffff0001 	.word	0xffff0001

08005a5c <_fwalk_reent>:
 8005a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a60:	4606      	mov	r6, r0
 8005a62:	4688      	mov	r8, r1
 8005a64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a68:	2700      	movs	r7, #0
 8005a6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a6e:	f1b9 0901 	subs.w	r9, r9, #1
 8005a72:	d505      	bpl.n	8005a80 <_fwalk_reent+0x24>
 8005a74:	6824      	ldr	r4, [r4, #0]
 8005a76:	2c00      	cmp	r4, #0
 8005a78:	d1f7      	bne.n	8005a6a <_fwalk_reent+0xe>
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a80:	89ab      	ldrh	r3, [r5, #12]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d907      	bls.n	8005a96 <_fwalk_reent+0x3a>
 8005a86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	d003      	beq.n	8005a96 <_fwalk_reent+0x3a>
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4630      	mov	r0, r6
 8005a92:	47c0      	blx	r8
 8005a94:	4307      	orrs	r7, r0
 8005a96:	3568      	adds	r5, #104	; 0x68
 8005a98:	e7e9      	b.n	8005a6e <_fwalk_reent+0x12>

08005a9a <__retarget_lock_init_recursive>:
 8005a9a:	4770      	bx	lr

08005a9c <__retarget_lock_acquire_recursive>:
 8005a9c:	4770      	bx	lr

08005a9e <__retarget_lock_release_recursive>:
 8005a9e:	4770      	bx	lr

08005aa0 <__swhatbuf_r>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	460e      	mov	r6, r1
 8005aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa8:	2900      	cmp	r1, #0
 8005aaa:	b096      	sub	sp, #88	; 0x58
 8005aac:	4614      	mov	r4, r2
 8005aae:	461d      	mov	r5, r3
 8005ab0:	da07      	bge.n	8005ac2 <__swhatbuf_r+0x22>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	602b      	str	r3, [r5, #0]
 8005ab6:	89b3      	ldrh	r3, [r6, #12]
 8005ab8:	061a      	lsls	r2, r3, #24
 8005aba:	d410      	bmi.n	8005ade <__swhatbuf_r+0x3e>
 8005abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ac0:	e00e      	b.n	8005ae0 <__swhatbuf_r+0x40>
 8005ac2:	466a      	mov	r2, sp
 8005ac4:	f000 f906 	bl	8005cd4 <_fstat_r>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	dbf2      	blt.n	8005ab2 <__swhatbuf_r+0x12>
 8005acc:	9a01      	ldr	r2, [sp, #4]
 8005ace:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ad2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ad6:	425a      	negs	r2, r3
 8005ad8:	415a      	adcs	r2, r3
 8005ada:	602a      	str	r2, [r5, #0]
 8005adc:	e7ee      	b.n	8005abc <__swhatbuf_r+0x1c>
 8005ade:	2340      	movs	r3, #64	; 0x40
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	6023      	str	r3, [r4, #0]
 8005ae4:	b016      	add	sp, #88	; 0x58
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}

08005ae8 <__smakebuf_r>:
 8005ae8:	898b      	ldrh	r3, [r1, #12]
 8005aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005aec:	079d      	lsls	r5, r3, #30
 8005aee:	4606      	mov	r6, r0
 8005af0:	460c      	mov	r4, r1
 8005af2:	d507      	bpl.n	8005b04 <__smakebuf_r+0x1c>
 8005af4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	6123      	str	r3, [r4, #16]
 8005afc:	2301      	movs	r3, #1
 8005afe:	6163      	str	r3, [r4, #20]
 8005b00:	b002      	add	sp, #8
 8005b02:	bd70      	pop	{r4, r5, r6, pc}
 8005b04:	ab01      	add	r3, sp, #4
 8005b06:	466a      	mov	r2, sp
 8005b08:	f7ff ffca 	bl	8005aa0 <__swhatbuf_r>
 8005b0c:	9900      	ldr	r1, [sp, #0]
 8005b0e:	4605      	mov	r5, r0
 8005b10:	4630      	mov	r0, r6
 8005b12:	f7ff f9eb 	bl	8004eec <_malloc_r>
 8005b16:	b948      	cbnz	r0, 8005b2c <__smakebuf_r+0x44>
 8005b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b1c:	059a      	lsls	r2, r3, #22
 8005b1e:	d4ef      	bmi.n	8005b00 <__smakebuf_r+0x18>
 8005b20:	f023 0303 	bic.w	r3, r3, #3
 8005b24:	f043 0302 	orr.w	r3, r3, #2
 8005b28:	81a3      	strh	r3, [r4, #12]
 8005b2a:	e7e3      	b.n	8005af4 <__smakebuf_r+0xc>
 8005b2c:	4b0d      	ldr	r3, [pc, #52]	; (8005b64 <__smakebuf_r+0x7c>)
 8005b2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	6020      	str	r0, [r4, #0]
 8005b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b38:	81a3      	strh	r3, [r4, #12]
 8005b3a:	9b00      	ldr	r3, [sp, #0]
 8005b3c:	6163      	str	r3, [r4, #20]
 8005b3e:	9b01      	ldr	r3, [sp, #4]
 8005b40:	6120      	str	r0, [r4, #16]
 8005b42:	b15b      	cbz	r3, 8005b5c <__smakebuf_r+0x74>
 8005b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f000 f8d5 	bl	8005cf8 <_isatty_r>
 8005b4e:	b128      	cbz	r0, 8005b5c <__smakebuf_r+0x74>
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	f023 0303 	bic.w	r3, r3, #3
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	81a3      	strh	r3, [r4, #12]
 8005b5c:	89a0      	ldrh	r0, [r4, #12]
 8005b5e:	4305      	orrs	r5, r0
 8005b60:	81a5      	strh	r5, [r4, #12]
 8005b62:	e7cd      	b.n	8005b00 <__smakebuf_r+0x18>
 8005b64:	080058f9 	.word	0x080058f9

08005b68 <__malloc_lock>:
 8005b68:	4801      	ldr	r0, [pc, #4]	; (8005b70 <__malloc_lock+0x8>)
 8005b6a:	f7ff bf97 	b.w	8005a9c <__retarget_lock_acquire_recursive>
 8005b6e:	bf00      	nop
 8005b70:	200004ac 	.word	0x200004ac

08005b74 <__malloc_unlock>:
 8005b74:	4801      	ldr	r0, [pc, #4]	; (8005b7c <__malloc_unlock+0x8>)
 8005b76:	f7ff bf92 	b.w	8005a9e <__retarget_lock_release_recursive>
 8005b7a:	bf00      	nop
 8005b7c:	200004ac 	.word	0x200004ac

08005b80 <_raise_r>:
 8005b80:	291f      	cmp	r1, #31
 8005b82:	b538      	push	{r3, r4, r5, lr}
 8005b84:	4604      	mov	r4, r0
 8005b86:	460d      	mov	r5, r1
 8005b88:	d904      	bls.n	8005b94 <_raise_r+0x14>
 8005b8a:	2316      	movs	r3, #22
 8005b8c:	6003      	str	r3, [r0, #0]
 8005b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b96:	b112      	cbz	r2, 8005b9e <_raise_r+0x1e>
 8005b98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b9c:	b94b      	cbnz	r3, 8005bb2 <_raise_r+0x32>
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f000 f830 	bl	8005c04 <_getpid_r>
 8005ba4:	462a      	mov	r2, r5
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	4620      	mov	r0, r4
 8005baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bae:	f000 b817 	b.w	8005be0 <_kill_r>
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d00a      	beq.n	8005bcc <_raise_r+0x4c>
 8005bb6:	1c59      	adds	r1, r3, #1
 8005bb8:	d103      	bne.n	8005bc2 <_raise_r+0x42>
 8005bba:	2316      	movs	r3, #22
 8005bbc:	6003      	str	r3, [r0, #0]
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	e7e7      	b.n	8005b92 <_raise_r+0x12>
 8005bc2:	2400      	movs	r4, #0
 8005bc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005bc8:	4628      	mov	r0, r5
 8005bca:	4798      	blx	r3
 8005bcc:	2000      	movs	r0, #0
 8005bce:	e7e0      	b.n	8005b92 <_raise_r+0x12>

08005bd0 <raise>:
 8005bd0:	4b02      	ldr	r3, [pc, #8]	; (8005bdc <raise+0xc>)
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	f7ff bfd3 	b.w	8005b80 <_raise_r>
 8005bda:	bf00      	nop
 8005bdc:	20000024 	.word	0x20000024

08005be0 <_kill_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4d07      	ldr	r5, [pc, #28]	; (8005c00 <_kill_r+0x20>)
 8005be4:	2300      	movs	r3, #0
 8005be6:	4604      	mov	r4, r0
 8005be8:	4608      	mov	r0, r1
 8005bea:	4611      	mov	r1, r2
 8005bec:	602b      	str	r3, [r5, #0]
 8005bee:	f7fb fb8d 	bl	800130c <_kill>
 8005bf2:	1c43      	adds	r3, r0, #1
 8005bf4:	d102      	bne.n	8005bfc <_kill_r+0x1c>
 8005bf6:	682b      	ldr	r3, [r5, #0]
 8005bf8:	b103      	cbz	r3, 8005bfc <_kill_r+0x1c>
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	bd38      	pop	{r3, r4, r5, pc}
 8005bfe:	bf00      	nop
 8005c00:	200004b4 	.word	0x200004b4

08005c04 <_getpid_r>:
 8005c04:	f7fb bb7a 	b.w	80012fc <_getpid>

08005c08 <__sread>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c10:	f000 f894 	bl	8005d3c <_read_r>
 8005c14:	2800      	cmp	r0, #0
 8005c16:	bfab      	itete	ge
 8005c18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c1a:	89a3      	ldrhlt	r3, [r4, #12]
 8005c1c:	181b      	addge	r3, r3, r0
 8005c1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c22:	bfac      	ite	ge
 8005c24:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c26:	81a3      	strhlt	r3, [r4, #12]
 8005c28:	bd10      	pop	{r4, pc}

08005c2a <__swrite>:
 8005c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2e:	461f      	mov	r7, r3
 8005c30:	898b      	ldrh	r3, [r1, #12]
 8005c32:	05db      	lsls	r3, r3, #23
 8005c34:	4605      	mov	r5, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	4616      	mov	r6, r2
 8005c3a:	d505      	bpl.n	8005c48 <__swrite+0x1e>
 8005c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c40:	2302      	movs	r3, #2
 8005c42:	2200      	movs	r2, #0
 8005c44:	f000 f868 	bl	8005d18 <_lseek_r>
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c52:	81a3      	strh	r3, [r4, #12]
 8005c54:	4632      	mov	r2, r6
 8005c56:	463b      	mov	r3, r7
 8005c58:	4628      	mov	r0, r5
 8005c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5e:	f000 b817 	b.w	8005c90 <_write_r>

08005c62 <__sseek>:
 8005c62:	b510      	push	{r4, lr}
 8005c64:	460c      	mov	r4, r1
 8005c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c6a:	f000 f855 	bl	8005d18 <_lseek_r>
 8005c6e:	1c43      	adds	r3, r0, #1
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	bf15      	itete	ne
 8005c74:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c7e:	81a3      	strheq	r3, [r4, #12]
 8005c80:	bf18      	it	ne
 8005c82:	81a3      	strhne	r3, [r4, #12]
 8005c84:	bd10      	pop	{r4, pc}

08005c86 <__sclose>:
 8005c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c8a:	f000 b813 	b.w	8005cb4 <_close_r>
	...

08005c90 <_write_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	4d07      	ldr	r5, [pc, #28]	; (8005cb0 <_write_r+0x20>)
 8005c94:	4604      	mov	r4, r0
 8005c96:	4608      	mov	r0, r1
 8005c98:	4611      	mov	r1, r2
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	602a      	str	r2, [r5, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f7fb fb6b 	bl	800137a <_write>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_write_r+0x1e>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_write_r+0x1e>
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	200004b4 	.word	0x200004b4

08005cb4 <_close_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4d06      	ldr	r5, [pc, #24]	; (8005cd0 <_close_r+0x1c>)
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4604      	mov	r4, r0
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	602b      	str	r3, [r5, #0]
 8005cc0:	f7fb fb77 	bl	80013b2 <_close>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d102      	bne.n	8005cce <_close_r+0x1a>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	b103      	cbz	r3, 8005cce <_close_r+0x1a>
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	bd38      	pop	{r3, r4, r5, pc}
 8005cd0:	200004b4 	.word	0x200004b4

08005cd4 <_fstat_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4d07      	ldr	r5, [pc, #28]	; (8005cf4 <_fstat_r+0x20>)
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4604      	mov	r4, r0
 8005cdc:	4608      	mov	r0, r1
 8005cde:	4611      	mov	r1, r2
 8005ce0:	602b      	str	r3, [r5, #0]
 8005ce2:	f7fb fb72 	bl	80013ca <_fstat>
 8005ce6:	1c43      	adds	r3, r0, #1
 8005ce8:	d102      	bne.n	8005cf0 <_fstat_r+0x1c>
 8005cea:	682b      	ldr	r3, [r5, #0]
 8005cec:	b103      	cbz	r3, 8005cf0 <_fstat_r+0x1c>
 8005cee:	6023      	str	r3, [r4, #0]
 8005cf0:	bd38      	pop	{r3, r4, r5, pc}
 8005cf2:	bf00      	nop
 8005cf4:	200004b4 	.word	0x200004b4

08005cf8 <_isatty_r>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	4d06      	ldr	r5, [pc, #24]	; (8005d14 <_isatty_r+0x1c>)
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	4604      	mov	r4, r0
 8005d00:	4608      	mov	r0, r1
 8005d02:	602b      	str	r3, [r5, #0]
 8005d04:	f7fb fb71 	bl	80013ea <_isatty>
 8005d08:	1c43      	adds	r3, r0, #1
 8005d0a:	d102      	bne.n	8005d12 <_isatty_r+0x1a>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	b103      	cbz	r3, 8005d12 <_isatty_r+0x1a>
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	bd38      	pop	{r3, r4, r5, pc}
 8005d14:	200004b4 	.word	0x200004b4

08005d18 <_lseek_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d07      	ldr	r5, [pc, #28]	; (8005d38 <_lseek_r+0x20>)
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	4608      	mov	r0, r1
 8005d20:	4611      	mov	r1, r2
 8005d22:	2200      	movs	r2, #0
 8005d24:	602a      	str	r2, [r5, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	f7fb fb6a 	bl	8001400 <_lseek>
 8005d2c:	1c43      	adds	r3, r0, #1
 8005d2e:	d102      	bne.n	8005d36 <_lseek_r+0x1e>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	b103      	cbz	r3, 8005d36 <_lseek_r+0x1e>
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	200004b4 	.word	0x200004b4

08005d3c <_read_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	4d07      	ldr	r5, [pc, #28]	; (8005d5c <_read_r+0x20>)
 8005d40:	4604      	mov	r4, r0
 8005d42:	4608      	mov	r0, r1
 8005d44:	4611      	mov	r1, r2
 8005d46:	2200      	movs	r2, #0
 8005d48:	602a      	str	r2, [r5, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f7fb faf8 	bl	8001340 <_read>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_read_r+0x1e>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_read_r+0x1e>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	200004b4 	.word	0x200004b4

08005d60 <_init>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	bf00      	nop
 8005d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d66:	bc08      	pop	{r3}
 8005d68:	469e      	mov	lr, r3
 8005d6a:	4770      	bx	lr

08005d6c <_fini>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	bf00      	nop
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr
